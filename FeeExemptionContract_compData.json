{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"contracts/HelloWorld1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract FeeExemptionContract {\\n    address public owner;\\n    uint256 public exemptionThreshold = 100; // in USD\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    mapping(address => bool) public walletConfirmed;\\n    mapping(address => uint256) public lastExemptionTimestamp;\\n\\n    uint256 public exemptionCooldown = 1 days; // 24 hours\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier belowThreshold() {\\n        require(isExemptFromFees(), \\\"Wallet balance is not below the threshold\\\");\\n        _;\\n    }\\n\\n    modifier cooldownPassed() {\\n        require(block.timestamp >= lastExemptionTimestamp[msg.sender] + exemptionCooldown, \\\"Cooldown period not passed\\\");\\n        _;\\n    }\\n\\n    constructor(address _priceFeed) {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    function setExemptionThreshold(uint256 _threshold) external onlyOwner {\\n        exemptionThreshold = _threshold;\\n    }\\n\\n    function isExemptFromFees() public view returns (bool) {\\n        uint256 walletBalanceInUSD = getWalletBalanceInUSD(msg.sender);\\n\\n        return walletBalanceInUSD < exemptionThreshold;\\n    }\\n\\n    function getWalletBalanceInUSD(address _wallet) public view returns (uint256) {\\n        (, int256 price, , ,) = priceFeed.latestRoundData();\\n        uint256 walletBalanceInWei = _wallet.balance;\\n        uint256 walletBalanceInUSD = (walletBalanceInWei * uint256(price)) / 1e18; // convert from Wei to USD\\n\\n        return walletBalanceInUSD;\\n    }\\n\\n    function confirmWalletBalanceBelowThreshold() external onlyOwner belowThreshold cooldownPassed {\\n        walletConfirmed[msg.sender] = true;\\n        lastExemptionTimestamp[msg.sender] = block.timestamp;\\n    }\\n\\n    // Example function that requires both ownership, a confirmed wallet below the threshold, and cooldown passed\\n    function doSomethingSecure() external onlyOwner belowThreshold cooldownPassed {\\n        // Your secure logic here\\n    }\\n}\\n\"},\"https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}}}}",
	"name": "FeeExemptionContract",
	"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"confirmWalletBalanceBelowThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doSomethingSecure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptionCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptionThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWalletBalanceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastExemptionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setExemptionThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HelloWorld1.sol\":\"FeeExemptionContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/HelloWorld1.sol\":{\"keccak256\":\"0x615721ed211b1b71c228e4dfdde41d4e3ed9437739001d99057c9629e94bc19f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://13e5c71e8ab5d84bdc1e8ca90dea0042aa5f19d107fac45d1b2bdc8936e2441f\",\"dweb:/ipfs/Qmd5Cfp6JgQGZrf7zoZUKic2439wYpECPGsgjeKXzxSziR\"]},\"https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7\",\"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2\"]}},\"version\":1}",
	"bytecode": {
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:805:2",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "70:80:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "80:22:2",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "95:6:2"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "89:5:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "89:13:2"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "80:5:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "138:5:2"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "111:26:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "111:33:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "111:33:2"
									}
								]
							},
							"name": "abi_decode_t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "48:6:2",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "56:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "64:5:2",
									"type": ""
								}
							],
							"src": "7:143:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "233:207:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "279:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "288:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "291:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "281:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "281:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "281:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "254:7:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "263:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "250:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "250:23:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "275:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "246:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "246:32:2"
										},
										"nodeType": "YulIf",
										"src": "243:2:2"
									},
									{
										"nodeType": "YulBlock",
										"src": "305:128:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "320:15:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "334:1:2",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "324:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "349:74:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "395:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "406:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "391:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "391:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "415:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "359:31:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "359:64:2"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "349:6:2"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "203:9:2",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "214:7:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "226:6:2",
									"type": ""
								}
							],
							"src": "156:284:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "491:51:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "501:35:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "530:5:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "512:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "512:24:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "501:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "473:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "483:7:2",
									"type": ""
								}
							],
							"src": "446:96:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "593:81:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "603:65:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "618:5:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "625:42:2",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "614:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "614:54:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "603:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "575:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "585:7:2",
									"type": ""
								}
							],
							"src": "548:126:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "723:79:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "780:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "789:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "792:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "782:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "782:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "782:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "746:5:2"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "771:5:2"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nodeType": "YulIdentifier",
																"src": "753:17:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "753:24:2"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "743:2:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "743:35:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "736:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "736:43:2"
										},
										"nodeType": "YulIf",
										"src": "733:2:2"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "716:5:2",
									"type": ""
								}
							],
							"src": "680:122:2"
						}
					]
				},
				"contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
				"id": 2,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "608060405260646001556201518060055534801561001c57600080fd5b50604051610e87380380610e87833981810160405281019061003e91906100da565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b6000815190506100d481610135565b92915050565b6000602082840312156100ec57600080fd5b60006100fa848285016100c5565b91505092915050565b600061010e82610115565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61013e81610103565b811461014957600080fd5b50565b610d2c8061015b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610154578063a6409e2f14610172578063b05cbbbd1461018e578063b4baee4b146101be578063b5b89c68146101dc578063e126a233146101fa576100a9565b806302ff55c9146100ae5780630ec30eb4146100cc578063474dc283146100fc578063741bef1a146101065780637e68b92114610124575b600080fd5b6100b6610204565b6040516100c39190610a0d565b60405180910390f35b6100e660048036038101906100e19190610807565b61021d565b6040516100f39190610aa3565b60405180910390f35b610104610235565b005b61010e610437565b60405161011b9190610a28565b60405180910390f35b61013e60048036038101906101399190610807565b61045d565b60405161014b9190610a0d565b60405180910390f35b61015c61047d565b60405161016991906109f2565b60405180910390f35b61018c60048036038101906101879190610830565b6104a1565b005b6101a860048036038101906101a39190610807565b610539565b6040516101b59190610aa3565b60405180910390f35b6101c661062c565b6040516101d39190610aa3565b60405180910390f35b6101e4610632565b6040516101f19190610aa3565b60405180910390f35b610202610638565b005b60008061021033610539565b9050600154811091505090565b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ba90610a63565b60405180910390fd5b6102cb610204565b61030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030190610a83565b60405180910390fd5b600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103579190610acf565b421015610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039090610a43565b60405180910390fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690610a63565b60405180910390fd5b8060018190555050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105a457600080fd5b505afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc9190610859565b50505091505060008373ffffffffffffffffffffffffffffffffffffffff163190506000670de0b6b3a764000083836106159190610b56565b61061f9190610b25565b9050809350505050919050565b60055481565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd90610a63565b60405180910390fd5b6106ce610204565b61070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070490610a83565b60405180910390fd5b600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461075a9190610acf565b42101561079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390610a43565b60405180910390fd5b565b6000813590506107ad81610c9a565b92915050565b6000815190506107c281610cb1565b92915050565b6000813590506107d781610cc8565b92915050565b6000815190506107ec81610cc8565b92915050565b60008151905061080181610cdf565b92915050565b60006020828403121561081957600080fd5b60006108278482850161079e565b91505092915050565b60006020828403121561084257600080fd5b6000610850848285016107c8565b91505092915050565b600080600080600060a0868803121561087157600080fd5b600061087f888289016107f2565b9550506020610890888289016107b3565b94505060406108a1888289016107dd565b93505060606108b2888289016107dd565b92505060806108c3888289016107f2565b9150509295509295909350565b6108d981610bb0565b82525050565b6108e881610bc2565b82525050565b6108f781610c18565b82525050565b600061090a601a83610abe565b91507f436f6f6c646f776e20706572696f64206e6f74207061737365640000000000006000830152602082019050919050565b600061094a600d83610abe565b91507f4e6f7420746865206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b600061098a602983610abe565b91507f57616c6c65742062616c616e6365206973206e6f742062656c6f77207468652060008301527f7468726573686f6c6400000000000000000000000000000000000000000000006020830152604082019050919050565b6109ec81610bf8565b82525050565b6000602082019050610a0760008301846108d0565b92915050565b6000602082019050610a2260008301846108df565b92915050565b6000602082019050610a3d60008301846108ee565b92915050565b60006020820190508181036000830152610a5c816108fd565b9050919050565b60006020820190508181036000830152610a7c8161093d565b9050919050565b60006020820190508181036000830152610a9c8161097d565b9050919050565b6000602082019050610ab860008301846109e3565b92915050565b600082825260208201905092915050565b6000610ada82610bf8565b9150610ae583610bf8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1a57610b19610c3c565b5b828201905092915050565b6000610b3082610bf8565b9150610b3b83610bf8565b925082610b4b57610b4a610c6b565b5b828204905092915050565b6000610b6182610bf8565b9150610b6c83610bf8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba557610ba4610c3c565b5b828202905092915050565b6000610bbb82610bd8565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c2382610c2a565b9050919050565b6000610c3582610bd8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610ca381610bb0565b8114610cae57600080fd5b50565b610cba81610bce565b8114610cc557600080fd5b50565b610cd181610bf8565b8114610cdc57600080fd5b50565b610ce881610c02565b8114610cf357600080fd5b5056fea264697066735822122010c3ecc51c5f8903e45f33fa9b1992d4f04a9a355dd4ea81d6f08f336140ad6c64736f6c63430008000033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x64 PUSH1 0x1 SSTORE PUSH3 0x15180 PUSH1 0x5 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xE87 CODESIZE SUB DUP1 PUSH2 0xE87 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x3E SWAP2 SWAP1 PUSH2 0xDA JUMP JUMPDEST CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x14C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD4 DUP2 PUSH2 0x135 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFA DUP5 DUP3 DUP6 ADD PUSH2 0xC5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10E DUP3 PUSH2 0x115 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13E DUP2 PUSH2 0x103 JUMP JUMPDEST DUP2 EQ PUSH2 0x149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xD2C DUP1 PUSH2 0x15B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xA6409E2F EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xB05CBBBD EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0xB4BAEE4B EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xB5B89C68 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xE126A233 EQ PUSH2 0x1FA JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x2FF55C9 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0xEC30EB4 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x474DC283 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0x7E68B921 EQ PUSH2 0x124 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x21D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x235 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10E PUSH2 0x437 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11B SWAP2 SWAP1 PUSH2 0xA28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x139 SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14B SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15C PUSH2 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x169 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x830 JUMP JUMPDEST PUSH2 0x4A1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B5 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C6 PUSH2 0x62C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D3 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E4 PUSH2 0x632 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F1 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH2 0x638 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x210 CALLER PUSH2 0x539 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SLOAD DUP2 LT SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BA SWAP1 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2CB PUSH2 0x204 JUMP JUMPDEST PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x301 SWAP1 PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x357 SWAP2 SWAP1 PUSH2 0xACF JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x399 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x390 SWAP1 PUSH2 0xA43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x52F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x526 SWAP1 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x859 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 PUSH2 0x615 SWAP2 SWAP1 PUSH2 0xB56 JUMP JUMPDEST PUSH2 0x61F SWAP2 SWAP1 PUSH2 0xB25 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BD SWAP1 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6CE PUSH2 0x204 JUMP JUMPDEST PUSH2 0x70D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x704 SWAP1 PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x75A SWAP2 SWAP1 PUSH2 0xACF JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x79C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x793 SWAP1 PUSH2 0xA43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7AD DUP2 PUSH2 0xC9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7C2 DUP2 PUSH2 0xCB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7D7 DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7EC DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x801 DUP2 PUSH2 0xCDF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x827 DUP5 DUP3 DUP6 ADD PUSH2 0x79E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x850 DUP5 DUP3 DUP6 ADD PUSH2 0x7C8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x87F DUP9 DUP3 DUP10 ADD PUSH2 0x7F2 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x890 DUP9 DUP3 DUP10 ADD PUSH2 0x7B3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x8A1 DUP9 DUP3 DUP10 ADD PUSH2 0x7DD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x8B2 DUP9 DUP3 DUP10 ADD PUSH2 0x7DD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x8C3 DUP9 DUP3 DUP10 ADD PUSH2 0x7F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x8D9 DUP2 PUSH2 0xBB0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xBC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8F7 DUP2 PUSH2 0xC18 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90A PUSH1 0x1A DUP4 PUSH2 0xABE JUMP JUMPDEST SWAP2 POP PUSH32 0x436F6F6C646F776E20706572696F64206E6F7420706173736564000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x94A PUSH1 0xD DUP4 PUSH2 0xABE JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420746865206F776E657200000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x98A PUSH1 0x29 DUP4 PUSH2 0xABE JUMP JUMPDEST SWAP2 POP PUSH32 0x57616C6C65742062616C616E6365206973206E6F742062656C6F772074686520 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7468726573686F6C640000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9EC DUP2 PUSH2 0xBF8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA07 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA22 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA3D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA5C DUP2 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA7C DUP2 PUSH2 0x93D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA9C DUP2 PUSH2 0x97D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xAB8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x9E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADA DUP3 PUSH2 0xBF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xAE5 DUP4 PUSH2 0xBF8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xB1A JUMPI PUSH2 0xB19 PUSH2 0xC3C JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB30 DUP3 PUSH2 0xBF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xB3B DUP4 PUSH2 0xBF8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xB4B JUMPI PUSH2 0xB4A PUSH2 0xC6B JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB61 DUP3 PUSH2 0xBF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xB6C DUP4 PUSH2 0xBF8 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xBA5 JUMPI PUSH2 0xBA4 PUSH2 0xC3C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBBB DUP3 PUSH2 0xBD8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 DUP3 PUSH2 0xC2A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC35 DUP3 PUSH2 0xBD8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xCA3 DUP2 PUSH2 0xBB0 JUMP JUMPDEST DUP2 EQ PUSH2 0xCAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xCBA DUP2 PUSH2 0xBCE JUMP JUMPDEST DUP2 EQ PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH2 0xBF8 JUMP JUMPDEST DUP2 EQ PUSH2 0xCDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xCE8 DUP2 PUSH2 0xC02 JUMP JUMPDEST DUP2 EQ PUSH2 0xCF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT 0xC3 0xEC 0xC5 SHR 0x5F DUP10 SUB 0xE4 0x5F CALLER STATICCALL SWAP12 NOT SWAP3 0xD4 CREATE 0x4A SWAP11 CALLDATALOAD 0x5D 0xD4 0xEA DUP2 0xD6 CREATE DUP16 CALLER PUSH2 0x40AD PUSH13 0x64736F6C634300080000330000 ",
		"sourceMap": "182:1994:0:-:0;;;280:3;244:39;;497:6;462:41;;926:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;976:10;968:5;;:18;;;;;;;;;;;;;;;;;;1030:10;996:9;;:45;;;;;;;;;;;;;;;;;;926:122;182:1994;;7:143:2;;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:284::-;;275:2;263:9;254:7;250:23;246:32;243:2;;;291:1;288;281:12;243:2;334:1;359:64;415:7;406:6;395:9;391:22;359:64;:::i;:::-;349:74;;305:128;233:207;;;;:::o;446:96::-;;512:24;530:5;512:24;:::i;:::-;501:35;;491:51;;;:::o;548:126::-;;625:42;618:5;614:54;603:65;;593:81;;;:::o;680:122::-;753:24;771:5;753:24;:::i;:::-;746:5;743:35;733:2;;792:1;789;782:12;733:2;723:79;:::o;182:1994:0:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_priceFeed",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "confirmWalletBalanceBelowThreshold",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "doSomethingSecure",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "exemptionCooldown",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "exemptionThreshold",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_wallet",
					"type": "address"
				}
			],
			"name": "getWalletBalanceInUSD",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "isExemptFromFees",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "lastExemptionTimestamp",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "priceFeed",
			"outputs": [
				{
					"internalType": "contract AggregatorV3Interface",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_threshold",
					"type": "uint256"
				}
			],
			"name": "setExemptionThreshold",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "walletConfirmed",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 4,
				"contract": "contracts/HelloWorld1.sol:FeeExemptionContract",
				"label": "owner",
				"offset": 0,
				"slot": "0",
				"type": "t_address"
			},
			{
				"astId": 7,
				"contract": "contracts/HelloWorld1.sol:FeeExemptionContract",
				"label": "exemptionThreshold",
				"offset": 0,
				"slot": "1",
				"type": "t_uint256"
			},
			{
				"astId": 10,
				"contract": "contracts/HelloWorld1.sol:FeeExemptionContract",
				"label": "priceFeed",
				"offset": 0,
				"slot": "2",
				"type": "t_contract(AggregatorV3Interface)221"
			},
			{
				"astId": 14,
				"contract": "contracts/HelloWorld1.sol:FeeExemptionContract",
				"label": "walletConfirmed",
				"offset": 0,
				"slot": "3",
				"type": "t_mapping(t_address,t_bool)"
			},
			{
				"astId": 18,
				"contract": "contracts/HelloWorld1.sol:FeeExemptionContract",
				"label": "lastExemptionTimestamp",
				"offset": 0,
				"slot": "4",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 21,
				"contract": "contracts/HelloWorld1.sol:FeeExemptionContract",
				"label": "exemptionCooldown",
				"offset": 0,
				"slot": "5",
				"type": "t_uint256"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_contract(AggregatorV3Interface)221": {
				"encoding": "inplace",
				"label": "contract AggregatorV3Interface",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var _priceFeed = /* var of type address here */ ;\nvar feeexemptioncontractContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"confirmWalletBalanceBelowThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doSomethingSecure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptionCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptionThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWalletBalanceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastExemptionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setExemptionThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]);\nvar feeexemptioncontract = feeexemptioncontractContract.deploy({\n     data: '0x608060405260646001556201518060055534801561001c57600080fd5b50604051610e87380380610e87833981810160405281019061003e91906100da565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b6000815190506100d481610135565b92915050565b6000602082840312156100ec57600080fd5b60006100fa848285016100c5565b91505092915050565b600061010e82610115565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61013e81610103565b811461014957600080fd5b50565b610d2c8061015b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610154578063a6409e2f14610172578063b05cbbbd1461018e578063b4baee4b146101be578063b5b89c68146101dc578063e126a233146101fa576100a9565b806302ff55c9146100ae5780630ec30eb4146100cc578063474dc283146100fc578063741bef1a146101065780637e68b92114610124575b600080fd5b6100b6610204565b6040516100c39190610a0d565b60405180910390f35b6100e660048036038101906100e19190610807565b61021d565b6040516100f39190610aa3565b60405180910390f35b610104610235565b005b61010e610437565b60405161011b9190610a28565b60405180910390f35b61013e60048036038101906101399190610807565b61045d565b60405161014b9190610a0d565b60405180910390f35b61015c61047d565b60405161016991906109f2565b60405180910390f35b61018c60048036038101906101879190610830565b6104a1565b005b6101a860048036038101906101a39190610807565b610539565b6040516101b59190610aa3565b60405180910390f35b6101c661062c565b6040516101d39190610aa3565b60405180910390f35b6101e4610632565b6040516101f19190610aa3565b60405180910390f35b610202610638565b005b60008061021033610539565b9050600154811091505090565b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ba90610a63565b60405180910390fd5b6102cb610204565b61030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030190610a83565b60405180910390fd5b600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103579190610acf565b421015610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039090610a43565b60405180910390fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690610a63565b60405180910390fd5b8060018190555050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105a457600080fd5b505afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc9190610859565b50505091505060008373ffffffffffffffffffffffffffffffffffffffff163190506000670de0b6b3a764000083836106159190610b56565b61061f9190610b25565b9050809350505050919050565b60055481565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd90610a63565b60405180910390fd5b6106ce610204565b61070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070490610a83565b60405180910390fd5b600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461075a9190610acf565b42101561079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390610a43565b60405180910390fd5b565b6000813590506107ad81610c9a565b92915050565b6000815190506107c281610cb1565b92915050565b6000813590506107d781610cc8565b92915050565b6000815190506107ec81610cc8565b92915050565b60008151905061080181610cdf565b92915050565b60006020828403121561081957600080fd5b60006108278482850161079e565b91505092915050565b60006020828403121561084257600080fd5b6000610850848285016107c8565b91505092915050565b600080600080600060a0868803121561087157600080fd5b600061087f888289016107f2565b9550506020610890888289016107b3565b94505060406108a1888289016107dd565b93505060606108b2888289016107dd565b92505060806108c3888289016107f2565b9150509295509295909350565b6108d981610bb0565b82525050565b6108e881610bc2565b82525050565b6108f781610c18565b82525050565b600061090a601a83610abe565b91507f436f6f6c646f776e20706572696f64206e6f74207061737365640000000000006000830152602082019050919050565b600061094a600d83610abe565b91507f4e6f7420746865206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b600061098a602983610abe565b91507f57616c6c65742062616c616e6365206973206e6f742062656c6f77207468652060008301527f7468726573686f6c6400000000000000000000000000000000000000000000006020830152604082019050919050565b6109ec81610bf8565b82525050565b6000602082019050610a0760008301846108d0565b92915050565b6000602082019050610a2260008301846108df565b92915050565b6000602082019050610a3d60008301846108ee565b92915050565b60006020820190508181036000830152610a5c816108fd565b9050919050565b60006020820190508181036000830152610a7c8161093d565b9050919050565b60006020820190508181036000830152610a9c8161097d565b9050919050565b6000602082019050610ab860008301846109e3565b92915050565b600082825260208201905092915050565b6000610ada82610bf8565b9150610ae583610bf8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1a57610b19610c3c565b5b828201905092915050565b6000610b3082610bf8565b9150610b3b83610bf8565b925082610b4b57610b4a610c6b565b5b828204905092915050565b6000610b6182610bf8565b9150610b6c83610bf8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba557610ba4610c3c565b5b828202905092915050565b6000610bbb82610bd8565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c2382610c2a565b9050919050565b6000610c3582610bd8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610ca381610bb0565b8114610cae57600080fd5b50565b610cba81610bce565b8114610cc557600080fd5b50565b610cd181610bf8565b8114610cdc57600080fd5b50565b610ce881610c02565b8114610cf357600080fd5b5056fea264697066735822122010c3ecc51c5f8903e45f33fa9b1992d4f04a9a355dd4ea81d6f08f336140ad6c64736f6c63430008000033', \n     arguments: [\n          _priceFeed,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"474dc283": "confirmWalletBalanceBelowThreshold()",
		"e126a233": "doSomethingSecure()",
		"b4baee4b": "exemptionCooldown()",
		"b5b89c68": "exemptionThreshold()",
		"b05cbbbd": "getWalletBalanceInUSD(address)",
		"02ff55c9": "isExemptFromFees()",
		"0ec30eb4": "lastExemptionTimestamp(address)",
		"8da5cb5b": "owner()",
		"741bef1a": "priceFeed()",
		"a6409e2f": "setExemptionThreshold(uint256)",
		"7e68b921": "walletConfirmed(address)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "674400",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"confirmWalletBalanceBelowThreshold()": "infinite",
			"doSomethingSecure()": "infinite",
			"exemptionCooldown()": "1195",
			"exemptionThreshold()": "1217",
			"getWalletBalanceInUSD(address)": "infinite",
			"isExemptFromFees()": "infinite",
			"lastExemptionTimestamp(address)": "1537",
			"owner()": "1211",
			"priceFeed()": "1324",
			"setExemptionThreshold(uint256)": "21309",
			"walletConfirmed(address)": "1634"
		}
	},
	"devdoc": {
		"kind": "dev",
		"methods": {},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:8855:2",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "59:87:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "69:29:2",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "91:6:2"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "78:12:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "78:20:2"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "69:5:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "134:5:2"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "107:26:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "107:33:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "107:33:2"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "37:6:2",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "45:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "53:5:2",
									"type": ""
								}
							],
							"src": "7:139:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "214:79:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "224:22:2",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "239:6:2"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "233:5:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "233:13:2"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "224:5:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "281:5:2"
												}
											],
											"functionName": {
												"name": "validator_revert_t_int256",
												"nodeType": "YulIdentifier",
												"src": "255:25:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "255:32:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "255:32:2"
									}
								]
							},
							"name": "abi_decode_t_int256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "192:6:2",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "200:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "208:5:2",
									"type": ""
								}
							],
							"src": "152:141:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "351:87:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "361:29:2",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "383:6:2"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "370:12:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "370:20:2"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "361:5:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "426:5:2"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "399:26:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "399:33:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "399:33:2"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "329:6:2",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "337:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "345:5:2",
									"type": ""
								}
							],
							"src": "299:139:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "507:80:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "517:22:2",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "532:6:2"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "526:5:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "526:13:2"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "517:5:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "575:5:2"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "548:26:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "548:33:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "548:33:2"
									}
								]
							},
							"name": "abi_decode_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "485:6:2",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "493:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "501:5:2",
									"type": ""
								}
							],
							"src": "444:143:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "655:79:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "665:22:2",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "680:6:2"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "674:5:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "674:13:2"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "665:5:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "722:5:2"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint80",
												"nodeType": "YulIdentifier",
												"src": "696:25:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "696:32:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "696:32:2"
									}
								]
							},
							"name": "abi_decode_t_uint80_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "633:6:2",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "641:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "649:5:2",
									"type": ""
								}
							],
							"src": "593:141:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "806:196:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "852:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "861:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "864:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "854:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "854:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "854:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "827:7:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "836:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "823:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "823:23:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "848:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "819:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "819:32:2"
										},
										"nodeType": "YulIf",
										"src": "816:2:2"
									},
									{
										"nodeType": "YulBlock",
										"src": "878:117:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "893:15:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "907:1:2",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "897:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "922:63:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "957:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "968:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "953:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "953:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "977:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "932:20:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "932:53:2"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "922:6:2"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "776:9:2",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "787:7:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "799:6:2",
									"type": ""
								}
							],
							"src": "740:262:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1074:196:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1120:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1129:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1132:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1122:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "1122:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1122:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1095:7:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1104:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1091:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1091:23:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1116:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "1087:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "1087:32:2"
										},
										"nodeType": "YulIf",
										"src": "1084:2:2"
									},
									{
										"nodeType": "YulBlock",
										"src": "1146:117:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1161:15:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1175:1:2",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1165:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1190:63:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1225:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1236:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1221:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "1221:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1245:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "1200:20:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1200:53:2"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1190:6:2"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1044:9:2",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "1055:7:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1067:6:2",
									"type": ""
								}
							],
							"src": "1008:262:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1418:762:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1465:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1474:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1477:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "1467:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "1467:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1467:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1439:7:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1448:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1435:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1435:23:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1460:3:2",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "1431:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "1431:33:2"
										},
										"nodeType": "YulIf",
										"src": "1428:2:2"
									},
									{
										"nodeType": "YulBlock",
										"src": "1491:127:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1506:15:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1520:1:2",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1510:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1535:73:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1580:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1591:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1576:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "1576:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1600:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint80_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "1545:30:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1545:63:2"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "1535:6:2"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "1628:128:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1643:16:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1657:2:2",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1647:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1673:73:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1718:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1729:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1714:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "1714:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1738:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_int256_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "1683:30:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1683:63:2"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "1673:6:2"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "1766:129:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1781:16:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1795:2:2",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1785:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1811:74:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1857:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1868:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1853:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "1853:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1877:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "1821:31:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1821:64:2"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "1811:6:2"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "1905:129:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1920:16:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1934:2:2",
													"type": "",
													"value": "96"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1924:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1950:74:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1996:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2007:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1992:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "1992:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2016:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "1960:31:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "1960:64:2"
												},
												"variableNames": [
													{
														"name": "value3",
														"nodeType": "YulIdentifier",
														"src": "1950:6:2"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "2044:129:2",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2059:17:2",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2073:3:2",
													"type": "",
													"value": "128"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2063:6:2",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2090:73:2",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2135:9:2"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2146:6:2"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2131:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "2131:22:2"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2155:7:2"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint80_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "2100:30:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "2100:63:2"
												},
												"variableNames": [
													{
														"name": "value4",
														"nodeType": "YulIdentifier",
														"src": "2090:6:2"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1356:9:2",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "1367:7:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1379:6:2",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "1387:6:2",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "1395:6:2",
									"type": ""
								},
								{
									"name": "value3",
									"nodeType": "YulTypedName",
									"src": "1403:6:2",
									"type": ""
								},
								{
									"name": "value4",
									"nodeType": "YulTypedName",
									"src": "1411:6:2",
									"type": ""
								}
							],
							"src": "1276:904:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2251:53:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2268:3:2"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2291:5:2"
														}
													],
													"functionName": {
														"name": "cleanup_t_address",
														"nodeType": "YulIdentifier",
														"src": "2273:17:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "2273:24:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2261:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "2261:37:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2261:37:2"
									}
								]
							},
							"name": "abi_encode_t_address_to_t_address_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2239:5:2",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2246:3:2",
									"type": ""
								}
							],
							"src": "2186:118:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2369:50:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2386:3:2"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2406:5:2"
														}
													],
													"functionName": {
														"name": "cleanup_t_bool",
														"nodeType": "YulIdentifier",
														"src": "2391:14:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "2391:21:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2379:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "2379:34:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2379:34:2"
									}
								]
							},
							"name": "abi_encode_t_bool_to_t_bool_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2357:5:2",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2364:3:2",
									"type": ""
								}
							],
							"src": "2310:109:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2519:95:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2536:3:2"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2601:5:2"
														}
													],
													"functionName": {
														"name": "convert_t_contract$_AggregatorV3Interface_$221_to_t_address",
														"nodeType": "YulIdentifier",
														"src": "2541:59:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "2541:66:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2529:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "2529:79:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2529:79:2"
									}
								]
							},
							"name": "abi_encode_t_contract$_AggregatorV3Interface_$221_to_t_address_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2507:5:2",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2514:3:2",
									"type": ""
								}
							],
							"src": "2425:189:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2766:178:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2776:74:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2842:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2847:2:2",
													"type": "",
													"value": "26"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "2783:58:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "2783:67:2"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "2776:3:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "2871:3:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2876:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2867:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "2867:11:2"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "2880:28:2",
													"type": "",
													"value": "Cooldown period not passed"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "2860:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "2860:49:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2860:49:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "2919:19:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "2930:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2935:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "2926:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "2926:12:2"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "2919:3:2"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_29c524aa7c60353d7c63a97709894665d4918fade58ddfd871a4ff5dae3e5339_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "2754:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "2762:3:2",
									"type": ""
								}
							],
							"src": "2620:324:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3096:165:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3106:74:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3172:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3177:2:2",
													"type": "",
													"value": "13"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3113:58:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3113:67:2"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "3106:3:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "3201:3:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3206:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3197:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "3197:11:2"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "3210:15:2",
													"type": "",
													"value": "Not the owner"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3190:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3190:36:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3190:36:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3236:19:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3247:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3252:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3243:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3243:12:2"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "3236:3:2"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3084:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3092:3:2",
									"type": ""
								}
							],
							"src": "2950:311:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3413:227:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3423:74:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3489:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3494:2:2",
													"type": "",
													"value": "41"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3430:58:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3430:67:2"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "3423:3:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "3518:3:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3523:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3514:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "3514:11:2"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "3527:34:2",
													"type": "",
													"value": "Wallet balance is not below the "
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3507:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3507:55:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3507:55:2"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "3583:3:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3588:2:2",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3579:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "3579:12:2"
												},
												{
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "3593:11:2",
													"type": "",
													"value": "threshold"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3572:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3572:33:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3572:33:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "3615:19:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3626:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3631:2:2",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3622:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3622:12:2"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "3615:3:2"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_e65870d7c5c831254636a7b018ca2ffddde735b4eac475c1154ea784be4f9b37_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3401:3:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3409:3:2",
									"type": ""
								}
							],
							"src": "3267:373:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3711:53:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3728:3:2"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3751:5:2"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "3733:17:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "3733:24:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3721:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3721:37:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3721:37:2"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3699:5:2",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3706:3:2",
									"type": ""
								}
							],
							"src": "3646:118:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3868:124:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3878:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3890:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3901:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3886:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3886:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "3878:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "3958:6:2"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3971:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3982:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3967:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "3967:17:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3914:43:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "3914:71:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3914:71:2"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3840:9:2",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3852:6:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "3863:4:2",
									"type": ""
								}
							],
							"src": "3770:222:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4090:118:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4100:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "4112:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4123:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4108:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4108:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "4100:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "4174:6:2"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4187:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4198:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4183:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "4183:17:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4136:37:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4136:65:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4136:65:2"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4062:9:2",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "4074:6:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "4085:4:2",
									"type": ""
								}
							],
							"src": "3998:210:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4341:153:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4351:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "4363:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4374:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4359:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4359:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "4351:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "4460:6:2"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4473:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4484:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4469:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "4469:17:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_contract$_AggregatorV3Interface_$221_to_t_address_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4387:72:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4387:100:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4387:100:2"
									}
								]
							},
							"name": "abi_encode_tuple_t_contract$_AggregatorV3Interface_$221__to_t_address__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4313:9:2",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "4325:6:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "4336:4:2",
									"type": ""
								}
							],
							"src": "4214:280:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4671:248:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4681:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "4693:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4704:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4689:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4689:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "4681:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4728:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4739:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4724:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "4724:17:2"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "4747:4:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4753:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "4743:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "4743:20:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4717:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4717:47:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4717:47:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "4773:139:2",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "4907:4:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_29c524aa7c60353d7c63a97709894665d4918fade58ddfd871a4ff5dae3e5339_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4781:124:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "4781:131:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "4773:4:2"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_29c524aa7c60353d7c63a97709894665d4918fade58ddfd871a4ff5dae3e5339__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4651:9:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "4666:4:2",
									"type": ""
								}
							],
							"src": "4500:419:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5096:248:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5106:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5118:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5129:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5114:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5114:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5106:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5153:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5164:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5149:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "5149:17:2"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "5172:4:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5178:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "5168:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "5168:20:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5142:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5142:47:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5142:47:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5198:139:2",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "5332:4:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5206:124:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5206:131:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5198:4:2"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5076:9:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "5091:4:2",
									"type": ""
								}
							],
							"src": "4925:419:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5521:248:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5531:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5543:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5554:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5539:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5539:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5531:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5578:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5589:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5574:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "5574:17:2"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "5597:4:2"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5603:9:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "5593:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "5593:20:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5567:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5567:47:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5567:47:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "5623:139:2",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "5757:4:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_e65870d7c5c831254636a7b018ca2ffddde735b4eac475c1154ea784be4f9b37_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5631:124:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5631:131:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5623:4:2"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_e65870d7c5c831254636a7b018ca2ffddde735b4eac475c1154ea784be4f9b37__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5501:9:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "5516:4:2",
									"type": ""
								}
							],
							"src": "5350:419:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5873:124:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5883:26:2",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "5895:9:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5906:2:2",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "5891:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5891:18:2"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "5883:4:2"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "5963:6:2"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5976:9:2"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5987:1:2",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5972:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "5972:17:2"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "5919:43:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "5919:71:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5919:71:2"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5845:9:2",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "5857:6:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "5868:4:2",
									"type": ""
								}
							],
							"src": "5775:222:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6099:73:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6116:3:2"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "6121:6:2"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6109:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6109:19:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6109:19:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6137:29:2",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6156:3:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6161:4:2",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6152:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6152:14:2"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "6137:11:2"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "6071:3:2",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "6076:6:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "6087:11:2",
									"type": ""
								}
							],
							"src": "6003:169:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6222:261:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6232:25:2",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6255:1:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6237:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6237:20:2"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6232:1:2"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6266:25:2",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6289:1:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6271:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6271:20:2"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6266:1:2"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6429:22:2",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "6431:16:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "6431:18:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6431:18:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6350:1:2"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6357:66:2",
															"type": "",
															"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
														},
														{
															"name": "y",
															"nodeType": "YulIdentifier",
															"src": "6425:1:2"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "6353:3:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "6353:74:2"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "6347:2:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6347:81:2"
										},
										"nodeType": "YulIf",
										"src": "6344:2:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6461:16:2",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6472:1:2"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6475:1:2"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6468:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6468:9:2"
										},
										"variableNames": [
											{
												"name": "sum",
												"nodeType": "YulIdentifier",
												"src": "6461:3:2"
											}
										]
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6209:1:2",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6212:1:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nodeType": "YulTypedName",
									"src": "6218:3:2",
									"type": ""
								}
							],
							"src": "6178:305:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6531:143:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6541:25:2",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6564:1:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6546:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6546:20:2"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6541:1:2"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6575:25:2",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6598:1:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6580:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6580:20:2"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6575:1:2"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6622:22:2",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x12",
															"nodeType": "YulIdentifier",
															"src": "6624:16:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "6624:18:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6624:18:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6619:1:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "6612:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6612:9:2"
										},
										"nodeType": "YulIf",
										"src": "6609:2:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6654:14:2",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6663:1:2"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6666:1:2"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "6659:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6659:9:2"
										},
										"variableNames": [
											{
												"name": "r",
												"nodeType": "YulIdentifier",
												"src": "6654:1:2"
											}
										]
									}
								]
							},
							"name": "checked_div_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6520:1:2",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6523:1:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nodeType": "YulTypedName",
									"src": "6529:1:2",
									"type": ""
								}
							],
							"src": "6489:185:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6728:300:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6738:25:2",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6761:1:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6743:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6743:20:2"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6738:1:2"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6772:25:2",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6795:1:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6777:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6777:20:2"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6772:1:2"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6970:22:2",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "6972:16:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "6972:18:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6972:18:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6882:1:2"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "6875:6:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "6875:9:2"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "6868:6:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "6868:17:2"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nodeType": "YulIdentifier",
															"src": "6890:1:2"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "6897:66:2",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																},
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6965:1:2"
																}
															],
															"functionName": {
																"name": "div",
																"nodeType": "YulIdentifier",
																"src": "6893:3:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "6893:74:2"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "6887:2:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "6887:81:2"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "6864:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "6864:105:2"
										},
										"nodeType": "YulIf",
										"src": "6861:2:2"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7002:20:2",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "7017:1:2"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "7020:1:2"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "7013:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7013:9:2"
										},
										"variableNames": [
											{
												"name": "product",
												"nodeType": "YulIdentifier",
												"src": "7002:7:2"
											}
										]
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6711:1:2",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6714:1:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nodeType": "YulTypedName",
									"src": "6720:7:2",
									"type": ""
								}
							],
							"src": "6680:348:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7079:51:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7089:35:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7118:5:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "7100:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7100:24:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "7089:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7061:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "7071:7:2",
									"type": ""
								}
							],
							"src": "7034:96:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7178:48:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7188:32:2",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "7213:5:2"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "7206:6:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "7206:13:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "7199:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7199:21:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "7188:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7160:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "7170:7:2",
									"type": ""
								}
							],
							"src": "7136:90:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7276:32:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7286:16:2",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "7297:5:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "7286:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_int256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7258:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "7268:7:2",
									"type": ""
								}
							],
							"src": "7232:76:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7359:81:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7369:65:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7384:5:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7391:42:2",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "7380:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7380:54:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "7369:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7341:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "7351:7:2",
									"type": ""
								}
							],
							"src": "7314:126:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7491:32:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7501:16:2",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "7512:5:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "7501:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7473:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "7483:7:2",
									"type": ""
								}
							],
							"src": "7446:77:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7573:61:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7583:45:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7598:5:2"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7605:22:2",
													"type": "",
													"value": "0xffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "7594:3:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7594:34:2"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "7583:7:2"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint80",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7555:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "7565:7:2",
									"type": ""
								}
							],
							"src": "7529:105:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7729:95:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7739:79:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7812:5:2"
												}
											],
											"functionName": {
												"name": "convert_t_contract$_AggregatorV3Interface_$221_to_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "7752:59:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7752:66:2"
										},
										"variableNames": [
											{
												"name": "converted",
												"nodeType": "YulIdentifier",
												"src": "7739:9:2"
											}
										]
									}
								]
							},
							"name": "convert_t_contract$_AggregatorV3Interface_$221_to_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7709:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nodeType": "YulTypedName",
									"src": "7719:9:2",
									"type": ""
								}
							],
							"src": "7640:184:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7919:53:2",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7929:37:2",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "7960:5:2"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "7942:17:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "7942:24:2"
										},
										"variableNames": [
											{
												"name": "converted",
												"nodeType": "YulIdentifier",
												"src": "7929:9:2"
											}
										]
									}
								]
							},
							"name": "convert_t_contract$_AggregatorV3Interface_$221_to_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "7899:5:2",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nodeType": "YulTypedName",
									"src": "7909:9:2",
									"type": ""
								}
							],
							"src": "7830:142:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8006:152:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8023:1:2",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8026:77:2",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8016:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8016:88:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8016:88:2"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8120:1:2",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8123:4:2",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8113:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8113:15:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8113:15:2"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8144:1:2",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8147:4:2",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "8137:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8137:15:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8137:15:2"
									}
								]
							},
							"name": "panic_error_0x11",
							"nodeType": "YulFunctionDefinition",
							"src": "7978:180:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8192:152:2",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8209:1:2",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8212:77:2",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8202:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8202:88:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8202:88:2"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8306:1:2",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8309:4:2",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8299:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8299:15:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8299:15:2"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8330:1:2",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8333:4:2",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "8323:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8323:15:2"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8323:15:2"
									}
								]
							},
							"name": "panic_error_0x12",
							"nodeType": "YulFunctionDefinition",
							"src": "8164:180:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8393:79:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8450:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8459:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8462:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "8452:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "8452:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8452:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8416:5:2"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8441:5:2"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nodeType": "YulIdentifier",
																"src": "8423:17:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "8423:24:2"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "8413:2:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "8413:35:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "8406:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8406:43:2"
										},
										"nodeType": "YulIf",
										"src": "8403:2:2"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8386:5:2",
									"type": ""
								}
							],
							"src": "8350:122:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8520:78:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8576:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8585:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8588:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "8578:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "8578:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8578:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8543:5:2"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8567:5:2"
																}
															],
															"functionName": {
																"name": "cleanup_t_int256",
																"nodeType": "YulIdentifier",
																"src": "8550:16:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "8550:23:2"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "8540:2:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "8540:34:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "8533:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8533:42:2"
										},
										"nodeType": "YulIf",
										"src": "8530:2:2"
									}
								]
							},
							"name": "validator_revert_t_int256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8513:5:2",
									"type": ""
								}
							],
							"src": "8478:120:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8647:79:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8704:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8713:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8716:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "8706:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "8706:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8706:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8670:5:2"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8695:5:2"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "8677:17:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "8677:24:2"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "8667:2:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "8667:35:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "8660:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8660:43:2"
										},
										"nodeType": "YulIf",
										"src": "8657:2:2"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8640:5:2",
									"type": ""
								}
							],
							"src": "8604:122:2"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8774:78:2",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8830:16:2",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8839:1:2",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8842:1:2",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "8832:6:2"
														},
														"nodeType": "YulFunctionCall",
														"src": "8832:12:2"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8832:12:2"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8797:5:2"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8821:5:2"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint80",
																"nodeType": "YulIdentifier",
																"src": "8804:16:2"
															},
															"nodeType": "YulFunctionCall",
															"src": "8804:23:2"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "8794:2:2"
													},
													"nodeType": "YulFunctionCall",
													"src": "8794:34:2"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "8787:6:2"
											},
											"nodeType": "YulFunctionCall",
											"src": "8787:42:2"
										},
										"nodeType": "YulIf",
										"src": "8784:2:2"
									}
								]
							},
							"name": "validator_revert_t_uint80",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8767:5:2",
									"type": ""
								}
							],
							"src": "8732:120:2"
						}
					]
				},
				"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_int256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int256(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint80_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint80(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint80_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint80_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_contract$_AggregatorV3Interface_$221_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_AggregatorV3Interface_$221_to_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_29c524aa7c60353d7c63a97709894665d4918fade58ddfd871a4ff5dae3e5339_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n\n        mstore(add(pos, 0), \"Cooldown period not passed\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n\n        mstore(add(pos, 0), \"Not the owner\")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e65870d7c5c831254636a7b018ca2ffddde735b4eac475c1154ea784be4f9b37_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n\n        mstore(add(pos, 0), \"Wallet balance is not below the \")\n\n        mstore(add(pos, 32), \"threshold\")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_AggregatorV3Interface_$221__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_AggregatorV3Interface_$221_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_29c524aa7c60353d7c63a97709894665d4918fade58ddfd871a4ff5dae3e5339__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_29c524aa7c60353d7c63a97709894665d4918fade58ddfd871a4ff5dae3e5339_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_72ec00def0a4f647f10f2a5c1742fab7d53364130edc365182f3ccef5864f2a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e65870d7c5c831254636a7b018ca2ffddde735b4eac475c1154ea784be4f9b37__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e65870d7c5c831254636a7b018ca2ffddde735b4eac475c1154ea784be4f9b37_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_int256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint80(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffff)\n    }\n\n    function convert_t_contract$_AggregatorV3Interface_$221_to_t_address(value) -> converted {\n        converted := convert_t_contract$_AggregatorV3Interface_$221_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_AggregatorV3Interface_$221_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_int256(value) {\n        if iszero(eq(value, cleanup_t_int256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint80(value) {\n        if iszero(eq(value, cleanup_t_uint80(value))) { revert(0, 0) }\n    }\n\n}\n",
				"id": 2,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610154578063a6409e2f14610172578063b05cbbbd1461018e578063b4baee4b146101be578063b5b89c68146101dc578063e126a233146101fa576100a9565b806302ff55c9146100ae5780630ec30eb4146100cc578063474dc283146100fc578063741bef1a146101065780637e68b92114610124575b600080fd5b6100b6610204565b6040516100c39190610a0d565b60405180910390f35b6100e660048036038101906100e19190610807565b61021d565b6040516100f39190610aa3565b60405180910390f35b610104610235565b005b61010e610437565b60405161011b9190610a28565b60405180910390f35b61013e60048036038101906101399190610807565b61045d565b60405161014b9190610a0d565b60405180910390f35b61015c61047d565b60405161016991906109f2565b60405180910390f35b61018c60048036038101906101879190610830565b6104a1565b005b6101a860048036038101906101a39190610807565b610539565b6040516101b59190610aa3565b60405180910390f35b6101c661062c565b6040516101d39190610aa3565b60405180910390f35b6101e4610632565b6040516101f19190610aa3565b60405180910390f35b610202610638565b005b60008061021033610539565b9050600154811091505090565b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ba90610a63565b60405180910390fd5b6102cb610204565b61030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030190610a83565b60405180910390fd5b600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103579190610acf565b421015610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039090610a43565b60405180910390fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690610a63565b60405180910390fd5b8060018190555050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105a457600080fd5b505afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc9190610859565b50505091505060008373ffffffffffffffffffffffffffffffffffffffff163190506000670de0b6b3a764000083836106159190610b56565b61061f9190610b25565b9050809350505050919050565b60055481565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd90610a63565b60405180910390fd5b6106ce610204565b61070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070490610a83565b60405180910390fd5b600554600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461075a9190610acf565b42101561079c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079390610a43565b60405180910390fd5b565b6000813590506107ad81610c9a565b92915050565b6000815190506107c281610cb1565b92915050565b6000813590506107d781610cc8565b92915050565b6000815190506107ec81610cc8565b92915050565b60008151905061080181610cdf565b92915050565b60006020828403121561081957600080fd5b60006108278482850161079e565b91505092915050565b60006020828403121561084257600080fd5b6000610850848285016107c8565b91505092915050565b600080600080600060a0868803121561087157600080fd5b600061087f888289016107f2565b9550506020610890888289016107b3565b94505060406108a1888289016107dd565b93505060606108b2888289016107dd565b92505060806108c3888289016107f2565b9150509295509295909350565b6108d981610bb0565b82525050565b6108e881610bc2565b82525050565b6108f781610c18565b82525050565b600061090a601a83610abe565b91507f436f6f6c646f776e20706572696f64206e6f74207061737365640000000000006000830152602082019050919050565b600061094a600d83610abe565b91507f4e6f7420746865206f776e6572000000000000000000000000000000000000006000830152602082019050919050565b600061098a602983610abe565b91507f57616c6c65742062616c616e6365206973206e6f742062656c6f77207468652060008301527f7468726573686f6c6400000000000000000000000000000000000000000000006020830152604082019050919050565b6109ec81610bf8565b82525050565b6000602082019050610a0760008301846108d0565b92915050565b6000602082019050610a2260008301846108df565b92915050565b6000602082019050610a3d60008301846108ee565b92915050565b60006020820190508181036000830152610a5c816108fd565b9050919050565b60006020820190508181036000830152610a7c8161093d565b9050919050565b60006020820190508181036000830152610a9c8161097d565b9050919050565b6000602082019050610ab860008301846109e3565b92915050565b600082825260208201905092915050565b6000610ada82610bf8565b9150610ae583610bf8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b1a57610b19610c3c565b5b828201905092915050565b6000610b3082610bf8565b9150610b3b83610bf8565b925082610b4b57610b4a610c6b565b5b828204905092915050565b6000610b6182610bf8565b9150610b6c83610bf8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba557610ba4610c3c565b5b828202905092915050565b6000610bbb82610bd8565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c2382610c2a565b9050919050565b6000610c3582610bd8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610ca381610bb0565b8114610cae57600080fd5b50565b610cba81610bce565b8114610cc557600080fd5b50565b610cd181610bf8565b8114610cdc57600080fd5b50565b610ce881610c02565b8114610cf357600080fd5b5056fea264697066735822122010c3ecc51c5f8903e45f33fa9b1992d4f04a9a355dd4ea81d6f08f336140ad6c64736f6c63430008000033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xA6409E2F EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xB05CBBBD EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0xB4BAEE4B EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xB5B89C68 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xE126A233 EQ PUSH2 0x1FA JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x2FF55C9 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0xEC30EB4 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x474DC283 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x741BEF1A EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0x7E68B921 EQ PUSH2 0x124 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x21D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x235 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x10E PUSH2 0x437 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11B SWAP2 SWAP1 PUSH2 0xA28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x139 SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14B SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15C PUSH2 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x169 SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x187 SWAP2 SWAP1 PUSH2 0x830 JUMP JUMPDEST PUSH2 0x4A1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B5 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C6 PUSH2 0x62C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D3 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E4 PUSH2 0x632 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F1 SWAP2 SWAP1 PUSH2 0xAA3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH2 0x638 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x210 CALLER PUSH2 0x539 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SLOAD DUP2 LT SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BA SWAP1 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2CB PUSH2 0x204 JUMP JUMPDEST PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x301 SWAP1 PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x357 SWAP2 SWAP1 PUSH2 0xACF JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x399 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x390 SWAP1 PUSH2 0xA43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x52F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x526 SWAP1 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFEAF968C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5DC SWAP2 SWAP1 PUSH2 0x859 JUMP JUMPDEST POP POP POP SWAP2 POP POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 PUSH2 0x615 SWAP2 SWAP1 PUSH2 0xB56 JUMP JUMPDEST PUSH2 0x61F SWAP2 SWAP1 PUSH2 0xB25 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6BD SWAP1 PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6CE PUSH2 0x204 JUMP JUMPDEST PUSH2 0x70D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x704 SWAP1 PUSH2 0xA83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x75A SWAP2 SWAP1 PUSH2 0xACF JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x79C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x793 SWAP1 PUSH2 0xA43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7AD DUP2 PUSH2 0xC9A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7C2 DUP2 PUSH2 0xCB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7D7 DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7EC DUP2 PUSH2 0xCC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x801 DUP2 PUSH2 0xCDF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x827 DUP5 DUP3 DUP6 ADD PUSH2 0x79E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x850 DUP5 DUP3 DUP6 ADD PUSH2 0x7C8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x87F DUP9 DUP3 DUP10 ADD PUSH2 0x7F2 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x890 DUP9 DUP3 DUP10 ADD PUSH2 0x7B3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x8A1 DUP9 DUP3 DUP10 ADD PUSH2 0x7DD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x8B2 DUP9 DUP3 DUP10 ADD PUSH2 0x7DD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x8C3 DUP9 DUP3 DUP10 ADD PUSH2 0x7F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x8D9 DUP2 PUSH2 0xBB0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8E8 DUP2 PUSH2 0xBC2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x8F7 DUP2 PUSH2 0xC18 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90A PUSH1 0x1A DUP4 PUSH2 0xABE JUMP JUMPDEST SWAP2 POP PUSH32 0x436F6F6C646F776E20706572696F64206E6F7420706173736564000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x94A PUSH1 0xD DUP4 PUSH2 0xABE JUMP JUMPDEST SWAP2 POP PUSH32 0x4E6F7420746865206F776E657200000000000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x98A PUSH1 0x29 DUP4 PUSH2 0xABE JUMP JUMPDEST SWAP2 POP PUSH32 0x57616C6C65742062616C616E6365206973206E6F742062656C6F772074686520 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7468726573686F6C640000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9EC DUP2 PUSH2 0xBF8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA07 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA22 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA3D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA5C DUP2 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA7C DUP2 PUSH2 0x93D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xA9C DUP2 PUSH2 0x97D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xAB8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x9E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADA DUP3 PUSH2 0xBF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xAE5 DUP4 PUSH2 0xBF8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xB1A JUMPI PUSH2 0xB19 PUSH2 0xC3C JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB30 DUP3 PUSH2 0xBF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xB3B DUP4 PUSH2 0xBF8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xB4B JUMPI PUSH2 0xB4A PUSH2 0xC6B JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB61 DUP3 PUSH2 0xBF8 JUMP JUMPDEST SWAP2 POP PUSH2 0xB6C DUP4 PUSH2 0xBF8 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xBA5 JUMPI PUSH2 0xBA4 PUSH2 0xC3C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBBB DUP3 PUSH2 0xBD8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 DUP3 PUSH2 0xC2A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC35 DUP3 PUSH2 0xBD8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xCA3 DUP2 PUSH2 0xBB0 JUMP JUMPDEST DUP2 EQ PUSH2 0xCAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xCBA DUP2 PUSH2 0xBCE JUMP JUMPDEST DUP2 EQ PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH2 0xBF8 JUMP JUMPDEST DUP2 EQ PUSH2 0xCDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xCE8 DUP2 PUSH2 0xC02 JUMP JUMPDEST DUP2 EQ PUSH2 0xCF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT 0xC3 0xEC 0xC5 SHR 0x5F DUP10 SUB 0xE4 0x5F CALLER STATICCALL SWAP12 NOT SWAP3 0xD4 CREATE 0x4A SWAP11 CALLDATALOAD 0x5D 0xD4 0xEA DUP2 0xD6 CREATE DUP16 CALLER PUSH2 0x40AD PUSH13 0x64736F6C634300080000330000 ",
		"sourceMap": "182:1994:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1178:191;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;398:57;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1727:208;;;:::i;:::-;;300:38;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;345:47;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;218:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1054:118;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1375:346;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;462:41;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;244:39;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2055:119;;;:::i;:::-;;1178:191;1227:4;1243:26;1272:33;1294:10;1272:21;:33::i;:::-;1243:62;;1344:18;;1323;:39;1316:46;;;1178:191;:::o;398:57::-;;;;;;;;;;;;;;;;;:::o;1727:208::-;575:5;;;;;;;;;;561:19;;:10;:19;;;553:45;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:18:::1;:16;:18::i;:::-;658:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;854:17:::2;;817:22;:34;840:10;817:34;;;;;;;;;;;;;;;;:54;;;;:::i;:::-;798:15;:73;;790:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;1862:4:::3;1832:15;:27;1848:10;1832:27;;;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;1913:15;1876:22;:34;1899:10;1876:34;;;;;;;;;;;;;;;:52;;;;1727:208::o:0;300:38::-;;;;;;;;;;;;;:::o;345:47::-;;;;;;;;;;;;;;;;;;;;;;:::o;218:20::-;;;;;;;;;;;;:::o;1054:118::-;575:5;;;;;;;;;;561:19;;:10;:19;;;553:45;;;;;;;;;;;;:::i;:::-;;;;;;;;;1155:10:::1;1134:18;:31;;;;1054:118:::0;:::o;1375:346::-;1444:7;1466:12;1487:9;;;;;;;;;;;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1463:51;;;;;;1524:26;1553:7;:15;;;1524:44;;1578:26;1647:4;1637:5;1608:18;:35;;;;:::i;:::-;1607:44;;;;:::i;:::-;1578:73;;1696:18;1689:25;;;;;1375:346;;;:::o;462:41::-;;;;:::o;244:39::-;;;;:::o;2055:119::-;575:5;;;;;;;;;;561:19;;:10;:19;;;553:45;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:18:::1;:16;:18::i;:::-;658:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;854:17:::2;;817:22;:34;840:10;817:34;;;;;;;;;;;;;;;;:54;;;;:::i;:::-;798:15;:73;;790:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;2055:119::o:0;7:139:2:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:141::-;;239:6;233:13;224:22;;255:32;281:5;255:32;:::i;:::-;214:79;;;;:::o;299:139::-;;383:6;370:20;361:29;;399:33;426:5;399:33;:::i;:::-;351:87;;;;:::o;444:143::-;;532:6;526:13;517:22;;548:33;575:5;548:33;:::i;:::-;507:80;;;;:::o;593:141::-;;680:6;674:13;665:22;;696:32;722:5;696:32;:::i;:::-;655:79;;;;:::o;740:262::-;;848:2;836:9;827:7;823:23;819:32;816:2;;;864:1;861;854:12;816:2;907:1;932:53;977:7;968:6;957:9;953:22;932:53;:::i;:::-;922:63;;878:117;806:196;;;;:::o;1008:262::-;;1116:2;1104:9;1095:7;1091:23;1087:32;1084:2;;;1132:1;1129;1122:12;1084:2;1175:1;1200:53;1245:7;1236:6;1225:9;1221:22;1200:53;:::i;:::-;1190:63;;1146:117;1074:196;;;;:::o;1276:904::-;;;;;;1460:3;1448:9;1439:7;1435:23;1431:33;1428:2;;;1477:1;1474;1467:12;1428:2;1520:1;1545:63;1600:7;1591:6;1580:9;1576:22;1545:63;:::i;:::-;1535:73;;1491:127;1657:2;1683:63;1738:7;1729:6;1718:9;1714:22;1683:63;:::i;:::-;1673:73;;1628:128;1795:2;1821:64;1877:7;1868:6;1857:9;1853:22;1821:64;:::i;:::-;1811:74;;1766:129;1934:2;1960:64;2016:7;2007:6;1996:9;1992:22;1960:64;:::i;:::-;1950:74;;1905:129;2073:3;2100:63;2155:7;2146:6;2135:9;2131:22;2100:63;:::i;:::-;2090:73;;2044:129;1418:762;;;;;;;;:::o;2186:118::-;2273:24;2291:5;2273:24;:::i;:::-;2268:3;2261:37;2251:53;;:::o;2310:109::-;2391:21;2406:5;2391:21;:::i;:::-;2386:3;2379:34;2369:50;;:::o;2425:189::-;2541:66;2601:5;2541:66;:::i;:::-;2536:3;2529:79;2519:95;;:::o;2620:324::-;;2783:67;2847:2;2842:3;2783:67;:::i;:::-;2776:74;;2880:28;2876:1;2871:3;2867:11;2860:49;2935:2;2930:3;2926:12;2919:19;;2766:178;;;:::o;2950:311::-;;3113:67;3177:2;3172:3;3113:67;:::i;:::-;3106:74;;3210:15;3206:1;3201:3;3197:11;3190:36;3252:2;3247:3;3243:12;3236:19;;3096:165;;;:::o;3267:373::-;;3430:67;3494:2;3489:3;3430:67;:::i;:::-;3423:74;;3527:34;3523:1;3518:3;3514:11;3507:55;3593:11;3588:2;3583:3;3579:12;3572:33;3631:2;3626:3;3622:12;3615:19;;3413:227;;;:::o;3646:118::-;3733:24;3751:5;3733:24;:::i;:::-;3728:3;3721:37;3711:53;;:::o;3770:222::-;;3901:2;3890:9;3886:18;3878:26;;3914:71;3982:1;3971:9;3967:17;3958:6;3914:71;:::i;:::-;3868:124;;;;:::o;3998:210::-;;4123:2;4112:9;4108:18;4100:26;;4136:65;4198:1;4187:9;4183:17;4174:6;4136:65;:::i;:::-;4090:118;;;;:::o;4214:280::-;;4374:2;4363:9;4359:18;4351:26;;4387:100;4484:1;4473:9;4469:17;4460:6;4387:100;:::i;:::-;4341:153;;;;:::o;4500:419::-;;4704:2;4693:9;4689:18;4681:26;;4753:9;4747:4;4743:20;4739:1;4728:9;4724:17;4717:47;4781:131;4907:4;4781:131;:::i;:::-;4773:139;;4671:248;;;:::o;4925:419::-;;5129:2;5118:9;5114:18;5106:26;;5178:9;5172:4;5168:20;5164:1;5153:9;5149:17;5142:47;5206:131;5332:4;5206:131;:::i;:::-;5198:139;;5096:248;;;:::o;5350:419::-;;5554:2;5543:9;5539:18;5531:26;;5603:9;5597:4;5593:20;5589:1;5578:9;5574:17;5567:47;5631:131;5757:4;5631:131;:::i;:::-;5623:139;;5521:248;;;:::o;5775:222::-;;5906:2;5895:9;5891:18;5883:26;;5919:71;5987:1;5976:9;5972:17;5963:6;5919:71;:::i;:::-;5873:124;;;;:::o;6003:169::-;;6121:6;6116:3;6109:19;6161:4;6156:3;6152:14;6137:29;;6099:73;;;;:::o;6178:305::-;;6237:20;6255:1;6237:20;:::i;:::-;6232:25;;6271:20;6289:1;6271:20;:::i;:::-;6266:25;;6425:1;6357:66;6353:74;6350:1;6347:81;6344:2;;;6431:18;;:::i;:::-;6344:2;6475:1;6472;6468:9;6461:16;;6222:261;;;;:::o;6489:185::-;;6546:20;6564:1;6546:20;:::i;:::-;6541:25;;6580:20;6598:1;6580:20;:::i;:::-;6575:25;;6619:1;6609:2;;6624:18;;:::i;:::-;6609:2;6666:1;6663;6659:9;6654:14;;6531:143;;;;:::o;6680:348::-;;6743:20;6761:1;6743:20;:::i;:::-;6738:25;;6777:20;6795:1;6777:20;:::i;:::-;6772:25;;6965:1;6897:66;6893:74;6890:1;6887:81;6882:1;6875:9;6868:17;6864:105;6861:2;;;6972:18;;:::i;:::-;6861:2;7020:1;7017;7013:9;7002:20;;6728:300;;;;:::o;7034:96::-;;7100:24;7118:5;7100:24;:::i;:::-;7089:35;;7079:51;;;:::o;7136:90::-;;7213:5;7206:13;7199:21;7188:32;;7178:48;;;:::o;7232:76::-;;7297:5;7286:16;;7276:32;;;:::o;7314:126::-;;7391:42;7384:5;7380:54;7369:65;;7359:81;;;:::o;7446:77::-;;7512:5;7501:16;;7491:32;;;:::o;7529:105::-;;7605:22;7598:5;7594:34;7583:45;;7573:61;;;:::o;7640:184::-;;7752:66;7812:5;7752:66;:::i;:::-;7739:79;;7729:95;;;:::o;7830:142::-;;7942:24;7960:5;7942:24;:::i;:::-;7929:37;;7919:53;;;:::o;7978:180::-;8026:77;8023:1;8016:88;8123:4;8120:1;8113:15;8147:4;8144:1;8137:15;8164:180;8212:77;8209:1;8202:88;8309:4;8306:1;8299:15;8333:4;8330:1;8323:15;8350:122;8423:24;8441:5;8423:24;:::i;:::-;8416:5;8413:35;8403:2;;8462:1;8459;8452:12;8403:2;8393:79;:::o;8478:120::-;8550:23;8567:5;8550:23;:::i;:::-;8543:5;8540:34;8530:2;;8588:1;8585;8578:12;8530:2;8520:78;:::o;8604:122::-;8677:24;8695:5;8677:24;:::i;:::-;8670:5;8667:35;8657:2;;8716:1;8713;8706:12;8657:2;8647:79;:::o;8732:120::-;8804:23;8821:5;8804:23;:::i;:::-;8797:5;8794:34;8784:2;;8842:1;8839;8832:12;8784:2;8774:78;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract FeeExemptionContract ...\n  PUSH 40\t\t\tcontract FeeExemptionContract ...\n  MSTORE \t\t\tcontract FeeExemptionContract ...\n  PUSH 64\t\t\t100\n  PUSH 1\t\t\tuint256 public exemptionThresh...\n  SSTORE \t\t\tuint256 public exemptionThresh...\n  PUSH 15180\t\t\t1 days\n  PUSH 5\t\t\tuint256 public exemptionCooldo...\n  SSTORE \t\t\tuint256 public exemptionCooldo...\n  CALLVALUE \t\t\tconstructor(address _priceFeed...\n  DUP1 \t\t\tconstructor(address _priceFeed...\n  ISZERO \t\t\tconstructor(address _priceFeed...\n  PUSH [tag] 1\t\t\tconstructor(address _priceFeed...\n  JUMPI \t\t\tconstructor(address _priceFeed...\n  PUSH 0\t\t\tconstructor(address _priceFeed...\n  DUP1 \t\t\tconstructor(address _priceFeed...\n  REVERT \t\t\tconstructor(address _priceFeed...\ntag 1\t\t\tconstructor(address _priceFeed...\n  JUMPDEST \t\t\tconstructor(address _priceFeed...\n  POP \t\t\tconstructor(address _priceFeed...\n  PUSH 40\t\t\tconstructor(address _priceFeed...\n  MLOAD \t\t\tconstructor(address _priceFeed...\n  PUSHSIZE \t\t\tconstructor(address _priceFeed...\n  CODESIZE \t\t\tconstructor(address _priceFeed...\n  SUB \t\t\tconstructor(address _priceFeed...\n  DUP1 \t\t\tconstructor(address _priceFeed...\n  PUSHSIZE \t\t\tconstructor(address _priceFeed...\n  DUP4 \t\t\tconstructor(address _priceFeed...\n  CODECOPY \t\t\tconstructor(address _priceFeed...\n  DUP2 \t\t\tconstructor(address _priceFeed...\n  DUP2 \t\t\tconstructor(address _priceFeed...\n  ADD \t\t\tconstructor(address _priceFeed...\n  PUSH 40\t\t\tconstructor(address _priceFeed...\n  MSTORE \t\t\tconstructor(address _priceFeed...\n  DUP2 \t\t\tconstructor(address _priceFeed...\n  ADD \t\t\tconstructor(address _priceFeed...\n  SWAP1 \t\t\tconstructor(address _priceFeed...\n  PUSH [tag] 2\t\t\tconstructor(address _priceFeed...\n  SWAP2 \t\t\tconstructor(address _priceFeed...\n  SWAP1 \t\t\tconstructor(address _priceFeed...\n  PUSH [tag] 3\t\t\tconstructor(address _priceFeed...\n  JUMP [in]\t\t\tconstructor(address _priceFeed...\ntag 2\t\t\tconstructor(address _priceFeed...\n  JUMPDEST \t\t\tconstructor(address _priceFeed...\n  CALLER \t\t\tmsg.sender\n  PUSH 0\t\t\towner\n  DUP1 \t\t\towner\n  PUSH 100\t\t\towner = msg.sender\n  EXP \t\t\towner = msg.sender\n  DUP2 \t\t\towner = msg.sender\n  SLOAD \t\t\towner = msg.sender\n  DUP2 \t\t\towner = msg.sender\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner = msg.sender\n  MUL \t\t\towner = msg.sender\n  NOT \t\t\towner = msg.sender\n  AND \t\t\towner = msg.sender\n  SWAP1 \t\t\towner = msg.sender\n  DUP4 \t\t\towner = msg.sender\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner = msg.sender\n  AND \t\t\towner = msg.sender\n  MUL \t\t\towner = msg.sender\n  OR \t\t\towner = msg.sender\n  SWAP1 \t\t\towner = msg.sender\n  SSTORE \t\t\towner = msg.sender\n  POP \t\t\towner = msg.sender\n  DUP1 \t\t\t_priceFeed\n  PUSH 2\t\t\tpriceFeed\n  PUSH 0\t\t\tpriceFeed\n  PUSH 100\t\t\tpriceFeed = AggregatorV3Interf...\n  EXP \t\t\tpriceFeed = AggregatorV3Interf...\n  DUP2 \t\t\tpriceFeed = AggregatorV3Interf...\n  SLOAD \t\t\tpriceFeed = AggregatorV3Interf...\n  DUP2 \t\t\tpriceFeed = AggregatorV3Interf...\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tpriceFeed = AggregatorV3Interf...\n  MUL \t\t\tpriceFeed = AggregatorV3Interf...\n  NOT \t\t\tpriceFeed = AggregatorV3Interf...\n  AND \t\t\tpriceFeed = AggregatorV3Interf...\n  SWAP1 \t\t\tpriceFeed = AggregatorV3Interf...\n  DUP4 \t\t\tpriceFeed = AggregatorV3Interf...\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tpriceFeed = AggregatorV3Interf...\n  AND \t\t\tpriceFeed = AggregatorV3Interf...\n  MUL \t\t\tpriceFeed = AggregatorV3Interf...\n  OR \t\t\tpriceFeed = AggregatorV3Interf...\n  SWAP1 \t\t\tpriceFeed = AggregatorV3Interf...\n  SSTORE \t\t\tpriceFeed = AggregatorV3Interf...\n  POP \t\t\tpriceFeed = AggregatorV3Interf...\n  POP \t\t\tconstructor(address _priceFeed...\n  PUSH [tag] 6\t\t\tcontract FeeExemptionContract ...\n  JUMP \t\t\tcontract FeeExemptionContract ...\ntag 8\t\t\t-License-Identifier: MIT\\nprag...\n  JUMPDEST \t\t\t-License-Identifier: MIT\\nprag...\n  PUSH 0\t\t\t-License-Identifier: MIT\\nprag...\n  DUP2 \t\t\tctkit/\n  MLOAD \t\t\tcontractkit/c\n  SWAP1 \t\t\tcom/smartcontractkit/c\n  POP \t\t\tcom/smartcontractkit/c\n  PUSH [tag] 10\t\t\tblob/master/contracts/src/v0.8...\n  DUP2 \t\t\t0.8/i\n  PUSH [tag] 11\t\t\tblob/master/contracts/src/v0.8...\n  JUMP [in]\t\t\tblob/master/contracts/src/v0.8...\ntag 10\t\t\tblob/master/contracts/src/v0.8...\n  JUMPDEST \t\t\tblob/master/contracts/src/v0.8...\n  SWAP3 \t\t\t://github.com/smartcontractkit...\n  SWAP2 \t\t\t://github.com/smartcontractkit...\n  POP \t\t\t://github.com/smartcontractkit...\n  POP \t\t\t://github.com/smartcontractkit...\n  JUMP [out]\t\t\t://github.com/smartcontractkit...\ntag 3\t\t\tregatorV3Interface.sol\";\\n\\nco...\n  JUMPDEST \t\t\tregatorV3Interface.sol\";\\n\\nco...\n  PUSH 0\t\t\tregatorV3Interface.sol\";\\n\\nco...\n  PUSH 20\t\t\tld\n  DUP3 \t\t\tptionThre\n  DUP5 \t\t\tblic ex\n  SUB \t\t\t6 public exemptionThres\n  SLT \t\t\tnt256 public exemptionThreshol...\n  ISZERO \t\t\t u\n  PUSH [tag] 13\t\t\t u\n  JUMPI \t\t\t u\n  PUSH 0\t\t\tU\n  DUP1 \t\t\ti\n  REVERT \t\t\t00; // in US\ntag 13\t\t\t u\n  JUMPDEST \t\t\t u\n  PUSH 0\t\t\tF\n  PUSH [tag] 14\t\t\ts => bool) public walletConfir...\n  DUP5 \t\t\t> uint2\n  DUP3 \t\t\taddres\n  DUP6 \t\t\t   mappin\n  ADD \t\t\td;\\n    mapping(address\n  PUSH [tag] 8\t\t\ts => bool) public walletConfir...\n  JUMP [in]\t\t\ts => bool) public walletConfir...\ntag 14\t\t\ts => bool) public walletConfir...\n  JUMPDEST \t\t\ts => bool) public walletConfir...\n  SWAP2 \t\t\ting(address => bool) public wa...\n  POP \t\t\ting(address => bool) public wa...\n  POP \t\t\tgatorV3Interface public priceF...\n  SWAP3 \t\t\towner;\\n    uint256 public exe...\n  SWAP2 \t\t\towner;\\n    uint256 public exe...\n  POP \t\t\towner;\\n    uint256 public exe...\n  POP \t\t\towner;\\n    uint256 public exe...\n  JUMP [out]\t\t\towner;\\n    uint256 public exe...\ntag 15\t\t\tTimestamp;\\n\\n    uint256 publ...\n  JUMPDEST \t\t\tTimestamp;\\n\\n    uint256 publ...\n  PUSH 0\t\t\tTimestamp;\\n\\n    uint256 publ...\n  PUSH [tag] 17\t\t\tours\\n\\n    modifier onlyO\n  DUP3 \t\t\t only\n  PUSH [tag] 18\t\t\tours\\n\\n    modifier onlyO\n  JUMP [in]\t\t\tours\\n\\n    modifier onlyO\ntag 17\t\t\tours\\n\\n    modifier onlyO\n  JUMPDEST \t\t\tours\\n\\n    modifier onlyO\n  SWAP1 \t\t\tys; // 24 hours\\n\\n    modifie...\n  POP \t\t\tys; // 24 hours\\n\\n    modifie...\n  SWAP2 \t\t\town = 1 days; // 24 hours\\n\\n ...\n  SWAP1 \t\t\town = 1 days; // 24 hours\\n\\n ...\n  POP \t\t\town = 1 days; // 24 hours\\n\\n ...\n  JUMP [out]\t\t\town = 1 days; // 24 hours\\n\\n ...\ntag 18\t\t\t     require(msg.sender == own...\n  JUMPDEST \t\t\t     require(msg.sender == own...\n  PUSH 0\t\t\t     require(msg.sender == own...\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tifier belowThreshold() {\\n    ...\n  DUP3 \t\t\t    m\n  AND \t\t\t }\\n\\n    modifier belowThresh...\n  SWAP1 \t\t\t     _;\\n    }\\n\\n    modifier...\n  POP \t\t\t     _;\\n    }\\n\\n    modifier...\n  SWAP2 \t\t\tner\");\\n        _;\\n    }\\n\\n ...\n  SWAP1 \t\t\tner\");\\n        _;\\n    }\\n\\n ...\n  POP \t\t\tner\");\\n        _;\\n    }\\n\\n ...\n  JUMP [out]\t\t\tner\");\\n        _;\\n    }\\n\\n ...\ntag 11\t\t\tes(), \"Wallet balance is not b...\n  JUMPDEST \t\t\tes(), \"Wallet balance is not b...\n  PUSH [tag] 21\t\t\t modifier cooldownPassed\n  DUP2 \t\t\tPasse\n  PUSH [tag] 15\t\t\t modifier cooldownPassed\n  JUMP [in]\t\t\t modifier cooldownPassed\ntag 21\t\t\t modifier cooldownPassed\n  JUMPDEST \t\t\t modifier cooldownPassed\n  DUP2 \t\t\t }\\n\\n \n  EQ \t\t\t    }\\n\\n    modifier cooldown...\n  PUSH [tag] 22\t\t\t  \n  JUMPI \t\t\t  \n  PUSH 0\t\t\tq\n  DUP1 \t\t\t \n  REVERT \t\t\t        requ\ntag 22\t\t\t  \n  JUMPDEST \t\t\t  \n  POP \t\t\tshold\");\\n        _;\\n    }\\n\\...\n  JUMP [out]\t\t\tshold\");\\n        _;\\n    }\\n\\...\ntag 6\t\t\tcontract FeeExemptionContract ...\n  JUMPDEST \t\t\tcontract FeeExemptionContract ...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract FeeExemptionContract ...\n  DUP1 \t\t\tcontract FeeExemptionContract ...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract FeeExemptionContract ...\n  PUSH 0\t\t\tcontract FeeExemptionContract ...\n  CODECOPY \t\t\tcontract FeeExemptionContract ...\n  PUSH 0\t\t\tcontract FeeExemptionContract ...\n  RETURN \t\t\tcontract FeeExemptionContract ...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract FeeExemptionContract ...\n      PUSH 40\t\t\tcontract FeeExemptionContract ...\n      MSTORE \t\t\tcontract FeeExemptionContract ...\n      CALLVALUE \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      ISZERO \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 1\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      PUSH 0\t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      REVERT \t\t\tcontract FeeExemptionContract ...\n    tag 1\t\t\tcontract FeeExemptionContract ...\n      JUMPDEST \t\t\tcontract FeeExemptionContract ...\n      POP \t\t\tcontract FeeExemptionContract ...\n      PUSH 4\t\t\tcontract FeeExemptionContract ...\n      CALLDATASIZE \t\t\tcontract FeeExemptionContract ...\n      LT \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 2\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      PUSH 0\t\t\tcontract FeeExemptionContract ...\n      CALLDATALOAD \t\t\tcontract FeeExemptionContract ...\n      PUSH E0\t\t\tcontract FeeExemptionContract ...\n      SHR \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH 8DA5CB5B\t\t\tcontract FeeExemptionContract ...\n      GT \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 14\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH 8DA5CB5B\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 8\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH A6409E2F\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 9\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH B05CBBBD\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 10\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH B4BAEE4B\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 11\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH B5B89C68\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 12\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH E126A233\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 13\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 2\t\t\tcontract FeeExemptionContract ...\n      JUMP \t\t\tcontract FeeExemptionContract ...\n    tag 14\t\t\tcontract FeeExemptionContract ...\n      JUMPDEST \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH 2FF55C9\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 3\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH EC30EB4\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 4\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH 474DC283\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 5\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH 741BEF1A\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 6\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      PUSH 7E68B921\t\t\tcontract FeeExemptionContract ...\n      EQ \t\t\tcontract FeeExemptionContract ...\n      PUSH [tag] 7\t\t\tcontract FeeExemptionContract ...\n      JUMPI \t\t\tcontract FeeExemptionContract ...\n    tag 2\t\t\tcontract FeeExemptionContract ...\n      JUMPDEST \t\t\tcontract FeeExemptionContract ...\n      PUSH 0\t\t\tcontract FeeExemptionContract ...\n      DUP1 \t\t\tcontract FeeExemptionContract ...\n      REVERT \t\t\tcontract FeeExemptionContract ...\n    tag 3\t\t\tfunction isExemptFromFees() pu...\n      JUMPDEST \t\t\tfunction isExemptFromFees() pu...\n      PUSH [tag] 15\t\t\tfunction isExemptFromFees() pu...\n      PUSH [tag] 16\t\t\tfunction isExemptFromFees() pu...\n      JUMP [in]\t\t\tfunction isExemptFromFees() pu...\n    tag 15\t\t\tfunction isExemptFromFees() pu...\n      JUMPDEST \t\t\tfunction isExemptFromFees() pu...\n      PUSH 40\t\t\tfunction isExemptFromFees() pu...\n      MLOAD \t\t\tfunction isExemptFromFees() pu...\n      PUSH [tag] 17\t\t\tfunction isExemptFromFees() pu...\n      SWAP2 \t\t\tfunction isExemptFromFees() pu...\n      SWAP1 \t\t\tfunction isExemptFromFees() pu...\n      PUSH [tag] 18\t\t\tfunction isExemptFromFees() pu...\n      JUMP [in]\t\t\tfunction isExemptFromFees() pu...\n    tag 17\t\t\tfunction isExemptFromFees() pu...\n      JUMPDEST \t\t\tfunction isExemptFromFees() pu...\n      PUSH 40\t\t\tfunction isExemptFromFees() pu...\n      MLOAD \t\t\tfunction isExemptFromFees() pu...\n      DUP1 \t\t\tfunction isExemptFromFees() pu...\n      SWAP2 \t\t\tfunction isExemptFromFees() pu...\n      SUB \t\t\tfunction isExemptFromFees() pu...\n      SWAP1 \t\t\tfunction isExemptFromFees() pu...\n      RETURN \t\t\tfunction isExemptFromFees() pu...\n    tag 4\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 19\t\t\tmapping(address => uint256) pu...\n      PUSH 4\t\t\tmapping(address => uint256) pu...\n      DUP1 \t\t\tmapping(address => uint256) pu...\n      CALLDATASIZE \t\t\tmapping(address => uint256) pu...\n      SUB \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      ADD \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 20\t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 21\t\t\tmapping(address => uint256) pu...\n      JUMP [in]\t\t\tmapping(address => uint256) pu...\n    tag 20\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 22\t\t\tmapping(address => uint256) pu...\n      JUMP [in]\t\t\tmapping(address => uint256) pu...\n    tag 19\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      MLOAD \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 23\t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      PUSH [tag] 24\t\t\tmapping(address => uint256) pu...\n      JUMP [in]\t\t\tmapping(address => uint256) pu...\n    tag 23\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      MLOAD \t\t\tmapping(address => uint256) pu...\n      DUP1 \t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      SUB \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      RETURN \t\t\tmapping(address => uint256) pu...\n    tag 5\t\t\tfunction confirmWalletBalanceB...\n      JUMPDEST \t\t\tfunction confirmWalletBalanceB...\n      PUSH [tag] 25\t\t\tfunction confirmWalletBalanceB...\n      PUSH [tag] 26\t\t\tfunction confirmWalletBalanceB...\n      JUMP [in]\t\t\tfunction confirmWalletBalanceB...\n    tag 25\t\t\tfunction confirmWalletBalanceB...\n      JUMPDEST \t\t\tfunction confirmWalletBalanceB...\n      STOP \t\t\tfunction confirmWalletBalanceB...\n    tag 6\t\t\tAggregatorV3Interface public p...\n      JUMPDEST \t\t\tAggregatorV3Interface public p...\n      PUSH [tag] 27\t\t\tAggregatorV3Interface public p...\n      PUSH [tag] 28\t\t\tAggregatorV3Interface public p...\n      JUMP [in]\t\t\tAggregatorV3Interface public p...\n    tag 27\t\t\tAggregatorV3Interface public p...\n      JUMPDEST \t\t\tAggregatorV3Interface public p...\n      PUSH 40\t\t\tAggregatorV3Interface public p...\n      MLOAD \t\t\tAggregatorV3Interface public p...\n      PUSH [tag] 29\t\t\tAggregatorV3Interface public p...\n      SWAP2 \t\t\tAggregatorV3Interface public p...\n      SWAP1 \t\t\tAggregatorV3Interface public p...\n      PUSH [tag] 30\t\t\tAggregatorV3Interface public p...\n      JUMP [in]\t\t\tAggregatorV3Interface public p...\n    tag 29\t\t\tAggregatorV3Interface public p...\n      JUMPDEST \t\t\tAggregatorV3Interface public p...\n      PUSH 40\t\t\tAggregatorV3Interface public p...\n      MLOAD \t\t\tAggregatorV3Interface public p...\n      DUP1 \t\t\tAggregatorV3Interface public p...\n      SWAP2 \t\t\tAggregatorV3Interface public p...\n      SUB \t\t\tAggregatorV3Interface public p...\n      SWAP1 \t\t\tAggregatorV3Interface public p...\n      RETURN \t\t\tAggregatorV3Interface public p...\n    tag 7\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 31\t\t\tmapping(address => bool) publi...\n      PUSH 4\t\t\tmapping(address => bool) publi...\n      DUP1 \t\t\tmapping(address => bool) publi...\n      CALLDATASIZE \t\t\tmapping(address => bool) publi...\n      SUB \t\t\tmapping(address => bool) publi...\n      DUP2 \t\t\tmapping(address => bool) publi...\n      ADD \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 32\t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 21\t\t\tmapping(address => bool) publi...\n      JUMP [in]\t\t\tmapping(address => bool) publi...\n    tag 32\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 33\t\t\tmapping(address => bool) publi...\n      JUMP [in]\t\t\tmapping(address => bool) publi...\n    tag 31\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH 40\t\t\tmapping(address => bool) publi...\n      MLOAD \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 34\t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH [tag] 18\t\t\tmapping(address => bool) publi...\n      JUMP [in]\t\t\tmapping(address => bool) publi...\n    tag 34\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH 40\t\t\tmapping(address => bool) publi...\n      MLOAD \t\t\tmapping(address => bool) publi...\n      DUP1 \t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      SUB \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      RETURN \t\t\tmapping(address => bool) publi...\n    tag 8\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH [tag] 35\t\t\taddress public owner\n      PUSH [tag] 36\t\t\taddress public owner\n      JUMP [in]\t\t\taddress public owner\n    tag 35\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH 40\t\t\taddress public owner\n      MLOAD \t\t\taddress public owner\n      PUSH [tag] 37\t\t\taddress public owner\n      SWAP2 \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      PUSH [tag] 38\t\t\taddress public owner\n      JUMP [in]\t\t\taddress public owner\n    tag 37\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH 40\t\t\taddress public owner\n      MLOAD \t\t\taddress public owner\n      DUP1 \t\t\taddress public owner\n      SWAP2 \t\t\taddress public owner\n      SUB \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      RETURN \t\t\taddress public owner\n    tag 9\t\t\tfunction setExemptionThreshold...\n      JUMPDEST \t\t\tfunction setExemptionThreshold...\n      PUSH [tag] 39\t\t\tfunction setExemptionThreshold...\n      PUSH 4\t\t\tfunction setExemptionThreshold...\n      DUP1 \t\t\tfunction setExemptionThreshold...\n      CALLDATASIZE \t\t\tfunction setExemptionThreshold...\n      SUB \t\t\tfunction setExemptionThreshold...\n      DUP2 \t\t\tfunction setExemptionThreshold...\n      ADD \t\t\tfunction setExemptionThreshold...\n      SWAP1 \t\t\tfunction setExemptionThreshold...\n      PUSH [tag] 40\t\t\tfunction setExemptionThreshold...\n      SWAP2 \t\t\tfunction setExemptionThreshold...\n      SWAP1 \t\t\tfunction setExemptionThreshold...\n      PUSH [tag] 41\t\t\tfunction setExemptionThreshold...\n      JUMP [in]\t\t\tfunction setExemptionThreshold...\n    tag 40\t\t\tfunction setExemptionThreshold...\n      JUMPDEST \t\t\tfunction setExemptionThreshold...\n      PUSH [tag] 42\t\t\tfunction setExemptionThreshold...\n      JUMP [in]\t\t\tfunction setExemptionThreshold...\n    tag 39\t\t\tfunction setExemptionThreshold...\n      JUMPDEST \t\t\tfunction setExemptionThreshold...\n      STOP \t\t\tfunction setExemptionThreshold...\n    tag 10\t\t\tfunction getWalletBalanceInUSD...\n      JUMPDEST \t\t\tfunction getWalletBalanceInUSD...\n      PUSH [tag] 43\t\t\tfunction getWalletBalanceInUSD...\n      PUSH 4\t\t\tfunction getWalletBalanceInUSD...\n      DUP1 \t\t\tfunction getWalletBalanceInUSD...\n      CALLDATASIZE \t\t\tfunction getWalletBalanceInUSD...\n      SUB \t\t\tfunction getWalletBalanceInUSD...\n      DUP2 \t\t\tfunction getWalletBalanceInUSD...\n      ADD \t\t\tfunction getWalletBalanceInUSD...\n      SWAP1 \t\t\tfunction getWalletBalanceInUSD...\n      PUSH [tag] 44\t\t\tfunction getWalletBalanceInUSD...\n      SWAP2 \t\t\tfunction getWalletBalanceInUSD...\n      SWAP1 \t\t\tfunction getWalletBalanceInUSD...\n      PUSH [tag] 21\t\t\tfunction getWalletBalanceInUSD...\n      JUMP [in]\t\t\tfunction getWalletBalanceInUSD...\n    tag 44\t\t\tfunction getWalletBalanceInUSD...\n      JUMPDEST \t\t\tfunction getWalletBalanceInUSD...\n      PUSH [tag] 45\t\t\tfunction getWalletBalanceInUSD...\n      JUMP [in]\t\t\tfunction getWalletBalanceInUSD...\n    tag 43\t\t\tfunction getWalletBalanceInUSD...\n      JUMPDEST \t\t\tfunction getWalletBalanceInUSD...\n      PUSH 40\t\t\tfunction getWalletBalanceInUSD...\n      MLOAD \t\t\tfunction getWalletBalanceInUSD...\n      PUSH [tag] 46\t\t\tfunction getWalletBalanceInUSD...\n      SWAP2 \t\t\tfunction getWalletBalanceInUSD...\n      SWAP1 \t\t\tfunction getWalletBalanceInUSD...\n      PUSH [tag] 24\t\t\tfunction getWalletBalanceInUSD...\n      JUMP [in]\t\t\tfunction getWalletBalanceInUSD...\n    tag 46\t\t\tfunction getWalletBalanceInUSD...\n      JUMPDEST \t\t\tfunction getWalletBalanceInUSD...\n      PUSH 40\t\t\tfunction getWalletBalanceInUSD...\n      MLOAD \t\t\tfunction getWalletBalanceInUSD...\n      DUP1 \t\t\tfunction getWalletBalanceInUSD...\n      SWAP2 \t\t\tfunction getWalletBalanceInUSD...\n      SUB \t\t\tfunction getWalletBalanceInUSD...\n      SWAP1 \t\t\tfunction getWalletBalanceInUSD...\n      RETURN \t\t\tfunction getWalletBalanceInUSD...\n    tag 11\t\t\tuint256 public exemptionCooldo...\n      JUMPDEST \t\t\tuint256 public exemptionCooldo...\n      PUSH [tag] 47\t\t\tuint256 public exemptionCooldo...\n      PUSH [tag] 48\t\t\tuint256 public exemptionCooldo...\n      JUMP [in]\t\t\tuint256 public exemptionCooldo...\n    tag 47\t\t\tuint256 public exemptionCooldo...\n      JUMPDEST \t\t\tuint256 public exemptionCooldo...\n      PUSH 40\t\t\tuint256 public exemptionCooldo...\n      MLOAD \t\t\tuint256 public exemptionCooldo...\n      PUSH [tag] 49\t\t\tuint256 public exemptionCooldo...\n      SWAP2 \t\t\tuint256 public exemptionCooldo...\n      SWAP1 \t\t\tuint256 public exemptionCooldo...\n      PUSH [tag] 24\t\t\tuint256 public exemptionCooldo...\n      JUMP [in]\t\t\tuint256 public exemptionCooldo...\n    tag 49\t\t\tuint256 public exemptionCooldo...\n      JUMPDEST \t\t\tuint256 public exemptionCooldo...\n      PUSH 40\t\t\tuint256 public exemptionCooldo...\n      MLOAD \t\t\tuint256 public exemptionCooldo...\n      DUP1 \t\t\tuint256 public exemptionCooldo...\n      SWAP2 \t\t\tuint256 public exemptionCooldo...\n      SUB \t\t\tuint256 public exemptionCooldo...\n      SWAP1 \t\t\tuint256 public exemptionCooldo...\n      RETURN \t\t\tuint256 public exemptionCooldo...\n    tag 12\t\t\tuint256 public exemptionThresh...\n      JUMPDEST \t\t\tuint256 public exemptionThresh...\n      PUSH [tag] 50\t\t\tuint256 public exemptionThresh...\n      PUSH [tag] 51\t\t\tuint256 public exemptionThresh...\n      JUMP [in]\t\t\tuint256 public exemptionThresh...\n    tag 50\t\t\tuint256 public exemptionThresh...\n      JUMPDEST \t\t\tuint256 public exemptionThresh...\n      PUSH 40\t\t\tuint256 public exemptionThresh...\n      MLOAD \t\t\tuint256 public exemptionThresh...\n      PUSH [tag] 52\t\t\tuint256 public exemptionThresh...\n      SWAP2 \t\t\tuint256 public exemptionThresh...\n      SWAP1 \t\t\tuint256 public exemptionThresh...\n      PUSH [tag] 24\t\t\tuint256 public exemptionThresh...\n      JUMP [in]\t\t\tuint256 public exemptionThresh...\n    tag 52\t\t\tuint256 public exemptionThresh...\n      JUMPDEST \t\t\tuint256 public exemptionThresh...\n      PUSH 40\t\t\tuint256 public exemptionThresh...\n      MLOAD \t\t\tuint256 public exemptionThresh...\n      DUP1 \t\t\tuint256 public exemptionThresh...\n      SWAP2 \t\t\tuint256 public exemptionThresh...\n      SUB \t\t\tuint256 public exemptionThresh...\n      SWAP1 \t\t\tuint256 public exemptionThresh...\n      RETURN \t\t\tuint256 public exemptionThresh...\n    tag 13\t\t\tfunction doSomethingSecure() e...\n      JUMPDEST \t\t\tfunction doSomethingSecure() e...\n      PUSH [tag] 53\t\t\tfunction doSomethingSecure() e...\n      PUSH [tag] 54\t\t\tfunction doSomethingSecure() e...\n      JUMP [in]\t\t\tfunction doSomethingSecure() e...\n    tag 53\t\t\tfunction doSomethingSecure() e...\n      JUMPDEST \t\t\tfunction doSomethingSecure() e...\n      STOP \t\t\tfunction doSomethingSecure() e...\n    tag 16\t\t\tfunction isExemptFromFees() pu...\n      JUMPDEST \t\t\tfunction isExemptFromFees() pu...\n      PUSH 0\t\t\tbool\n      DUP1 \t\t\tuint256 walletBalanceInUSD\n      PUSH [tag] 56\t\t\tgetWalletBalanceInUSD(msg.send...\n      CALLER \t\t\tmsg.sender\n      PUSH [tag] 45\t\t\tgetWalletBalanceInUSD\n      JUMP [in]\t\t\tgetWalletBalanceInUSD(msg.send...\n    tag 56\t\t\tgetWalletBalanceInUSD(msg.send...\n      JUMPDEST \t\t\tgetWalletBalanceInUSD(msg.send...\n      SWAP1 \t\t\tuint256 walletBalanceInUSD = g...\n      POP \t\t\tuint256 walletBalanceInUSD = g...\n      PUSH 1\t\t\texemptionThreshold\n      SLOAD \t\t\texemptionThreshold\n      DUP2 \t\t\twalletBalanceInUSD\n      LT \t\t\twalletBalanceInUSD < exemption...\n      SWAP2 \t\t\treturn walletBalanceInUSD < ex...\n      POP \t\t\treturn walletBalanceInUSD < ex...\n      POP \t\t\treturn walletBalanceInUSD < ex...\n      SWAP1 \t\t\tfunction isExemptFromFees() pu...\n      JUMP [out]\t\t\tfunction isExemptFromFees() pu...\n    tag 22\t\t\tmapping(address => uint256) pu...\n      JUMPDEST \t\t\tmapping(address => uint256) pu...\n      PUSH 4\t\t\tmapping(address => uint256) pu...\n      PUSH 20\t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      DUP1 \t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      MSTORE \t\t\tmapping(address => uint256) pu...\n      PUSH 40\t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      KECCAK256 \t\t\tmapping(address => uint256) pu...\n      PUSH 0\t\t\tmapping(address => uint256) pu...\n      SWAP2 \t\t\tmapping(address => uint256) pu...\n      POP \t\t\tmapping(address => uint256) pu...\n      SWAP1 \t\t\tmapping(address => uint256) pu...\n      POP \t\t\tmapping(address => uint256) pu...\n      SLOAD \t\t\tmapping(address => uint256) pu...\n      DUP2 \t\t\tmapping(address => uint256) pu...\n      JUMP [out]\t\t\tmapping(address => uint256) pu...\n    tag 26\t\t\tfunction confirmWalletBalanceB...\n      JUMPDEST \t\t\tfunction confirmWalletBalanceB...\n      PUSH 0\t\t\towner\n      DUP1 \t\t\towner\n      SLOAD \t\t\towner\n      SWAP1 \t\t\towner\n      PUSH 100\t\t\towner\n      EXP \t\t\towner\n      SWAP1 \t\t\towner\n      DIV \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner\n      AND \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      EQ \t\t\tmsg.sender == owner\n      PUSH [tag] 58\t\t\trequire(msg.sender == owner, \"...\n      JUMPI \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == owner, \"...\n      DUP2 \t\t\trequire(msg.sender == owner, \"...\n      MSTORE \t\t\trequire(msg.sender == owner, \"...\n      PUSH 4\t\t\trequire(msg.sender == owner, \"...\n      ADD \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 59\t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 60\t\t\trequire(msg.sender == owner, \"...\n      JUMP [in]\t\t\trequire(msg.sender == owner, \"...\n    tag 59\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      DUP1 \t\t\trequire(msg.sender == owner, \"...\n      SWAP2 \t\t\trequire(msg.sender == owner, \"...\n      SUB \t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      REVERT \t\t\trequire(msg.sender == owner, \"...\n    tag 58\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 62\t\t\tisExemptFromFees()\n      PUSH [tag] 16\t\t\tisExemptFromFees\n      JUMP [in]\t\t\tisExemptFromFees()\n    tag 62\t\t\tisExemptFromFees()\n      JUMPDEST \t\t\tisExemptFromFees()\n      PUSH [tag] 63\t\t\trequire(isExemptFromFees(), \"W...\n      JUMPI \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 40\t\t\trequire(isExemptFromFees(), \"W...\n      MLOAD \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(isExemptFromFees(), \"W...\n      DUP2 \t\t\trequire(isExemptFromFees(), \"W...\n      MSTORE \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 4\t\t\trequire(isExemptFromFees(), \"W...\n      ADD \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH [tag] 64\t\t\trequire(isExemptFromFees(), \"W...\n      SWAP1 \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH [tag] 65\t\t\trequire(isExemptFromFees(), \"W...\n      JUMP [in]\t\t\trequire(isExemptFromFees(), \"W...\n    tag 64\t\t\trequire(isExemptFromFees(), \"W...\n      JUMPDEST \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 40\t\t\trequire(isExemptFromFees(), \"W...\n      MLOAD \t\t\trequire(isExemptFromFees(), \"W...\n      DUP1 \t\t\trequire(isExemptFromFees(), \"W...\n      SWAP2 \t\t\trequire(isExemptFromFees(), \"W...\n      SUB \t\t\trequire(isExemptFromFees(), \"W...\n      SWAP1 \t\t\trequire(isExemptFromFees(), \"W...\n      REVERT \t\t\trequire(isExemptFromFees(), \"W...\n    tag 63\t\t\trequire(isExemptFromFees(), \"W...\n      JUMPDEST \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 5\t\t\texemptionCooldown\n      SLOAD \t\t\texemptionCooldown\n      PUSH 4\t\t\tlastExemptionTimestamp\n      PUSH 0\t\t\tlastExemptionTimestamp[msg.sen...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tlastExemptionTimestamp[msg.sen...\n      AND \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tlastExemptionTimestamp[msg.sen...\n      AND \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      MSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 20\t\t\tlastExemptionTimestamp[msg.sen...\n      ADD \t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP1 \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      MSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 20\t\t\tlastExemptionTimestamp[msg.sen...\n      ADD \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 0\t\t\tlastExemptionTimestamp[msg.sen...\n      KECCAK256 \t\t\tlastExemptionTimestamp[msg.sen...\n      SLOAD \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH [tag] 67\t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP1 \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH [tag] 68\t\t\tlastExemptionTimestamp[msg.sen...\n      JUMP [in]\t\t\tlastExemptionTimestamp[msg.sen...\n    tag 67\t\t\tlastExemptionTimestamp[msg.sen...\n      JUMPDEST \t\t\tlastExemptionTimestamp[msg.sen...\n      TIMESTAMP \t\t\tblock.timestamp\n      LT \t\t\tblock.timestamp >= lastExempti...\n      ISZERO \t\t\tblock.timestamp >= lastExempti...\n      PUSH [tag] 69\t\t\trequire(block.timestamp >= las...\n      JUMPI \t\t\trequire(block.timestamp >= las...\n      PUSH 40\t\t\trequire(block.timestamp >= las...\n      MLOAD \t\t\trequire(block.timestamp >= las...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(block.timestamp >= las...\n      DUP2 \t\t\trequire(block.timestamp >= las...\n      MSTORE \t\t\trequire(block.timestamp >= las...\n      PUSH 4\t\t\trequire(block.timestamp >= las...\n      ADD \t\t\trequire(block.timestamp >= las...\n      PUSH [tag] 70\t\t\trequire(block.timestamp >= las...\n      SWAP1 \t\t\trequire(block.timestamp >= las...\n      PUSH [tag] 71\t\t\trequire(block.timestamp >= las...\n      JUMP [in]\t\t\trequire(block.timestamp >= las...\n    tag 70\t\t\trequire(block.timestamp >= las...\n      JUMPDEST \t\t\trequire(block.timestamp >= las...\n      PUSH 40\t\t\trequire(block.timestamp >= las...\n      MLOAD \t\t\trequire(block.timestamp >= las...\n      DUP1 \t\t\trequire(block.timestamp >= las...\n      SWAP2 \t\t\trequire(block.timestamp >= las...\n      SUB \t\t\trequire(block.timestamp >= las...\n      SWAP1 \t\t\trequire(block.timestamp >= las...\n      REVERT \t\t\trequire(block.timestamp >= las...\n    tag 69\t\t\trequire(block.timestamp >= las...\n      JUMPDEST \t\t\trequire(block.timestamp >= las...\n      PUSH 1\t\t\ttrue\n      PUSH 3\t\t\twalletConfirmed\n      PUSH 0\t\t\twalletConfirmed[msg.sender]\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twalletConfirmed[msg.sender]\n      AND \t\t\twalletConfirmed[msg.sender]\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\twalletConfirmed[msg.sender]\n      AND \t\t\twalletConfirmed[msg.sender]\n      DUP2 \t\t\twalletConfirmed[msg.sender]\n      MSTORE \t\t\twalletConfirmed[msg.sender]\n      PUSH 20\t\t\twalletConfirmed[msg.sender]\n      ADD \t\t\twalletConfirmed[msg.sender]\n      SWAP1 \t\t\twalletConfirmed[msg.sender]\n      DUP2 \t\t\twalletConfirmed[msg.sender]\n      MSTORE \t\t\twalletConfirmed[msg.sender]\n      PUSH 20\t\t\twalletConfirmed[msg.sender]\n      ADD \t\t\twalletConfirmed[msg.sender]\n      PUSH 0\t\t\twalletConfirmed[msg.sender]\n      KECCAK256 \t\t\twalletConfirmed[msg.sender]\n      PUSH 0\t\t\twalletConfirmed[msg.sender]\n      PUSH 100\t\t\twalletConfirmed[msg.sender] = ...\n      EXP \t\t\twalletConfirmed[msg.sender] = ...\n      DUP2 \t\t\twalletConfirmed[msg.sender] = ...\n      SLOAD \t\t\twalletConfirmed[msg.sender] = ...\n      DUP2 \t\t\twalletConfirmed[msg.sender] = ...\n      PUSH FF\t\t\twalletConfirmed[msg.sender] = ...\n      MUL \t\t\twalletConfirmed[msg.sender] = ...\n      NOT \t\t\twalletConfirmed[msg.sender] = ...\n      AND \t\t\twalletConfirmed[msg.sender] = ...\n      SWAP1 \t\t\twalletConfirmed[msg.sender] = ...\n      DUP4 \t\t\twalletConfirmed[msg.sender] = ...\n      ISZERO \t\t\twalletConfirmed[msg.sender] = ...\n      ISZERO \t\t\twalletConfirmed[msg.sender] = ...\n      MUL \t\t\twalletConfirmed[msg.sender] = ...\n      OR \t\t\twalletConfirmed[msg.sender] = ...\n      SWAP1 \t\t\twalletConfirmed[msg.sender] = ...\n      SSTORE \t\t\twalletConfirmed[msg.sender] = ...\n      POP \t\t\twalletConfirmed[msg.sender] = ...\n      TIMESTAMP \t\t\tblock.timestamp\n      PUSH 4\t\t\tlastExemptionTimestamp\n      PUSH 0\t\t\tlastExemptionTimestamp[msg.sen...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tlastExemptionTimestamp[msg.sen...\n      AND \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tlastExemptionTimestamp[msg.sen...\n      AND \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      MSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 20\t\t\tlastExemptionTimestamp[msg.sen...\n      ADD \t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP1 \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      MSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 20\t\t\tlastExemptionTimestamp[msg.sen...\n      ADD \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 0\t\t\tlastExemptionTimestamp[msg.sen...\n      KECCAK256 \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP1 \t\t\tlastExemptionTimestamp[msg.sen...\n      SSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      POP \t\t\tlastExemptionTimestamp[msg.sen...\n      JUMP [out]\t\t\tfunction confirmWalletBalanceB...\n    tag 28\t\t\tAggregatorV3Interface public p...\n      JUMPDEST \t\t\tAggregatorV3Interface public p...\n      PUSH 2\t\t\tAggregatorV3Interface public p...\n      PUSH 0\t\t\tAggregatorV3Interface public p...\n      SWAP1 \t\t\tAggregatorV3Interface public p...\n      SLOAD \t\t\tAggregatorV3Interface public p...\n      SWAP1 \t\t\tAggregatorV3Interface public p...\n      PUSH 100\t\t\tAggregatorV3Interface public p...\n      EXP \t\t\tAggregatorV3Interface public p...\n      SWAP1 \t\t\tAggregatorV3Interface public p...\n      DIV \t\t\tAggregatorV3Interface public p...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tAggregatorV3Interface public p...\n      AND \t\t\tAggregatorV3Interface public p...\n      DUP2 \t\t\tAggregatorV3Interface public p...\n      JUMP [out]\t\t\tAggregatorV3Interface public p...\n    tag 33\t\t\tmapping(address => bool) publi...\n      JUMPDEST \t\t\tmapping(address => bool) publi...\n      PUSH 3\t\t\tmapping(address => bool) publi...\n      PUSH 20\t\t\tmapping(address => bool) publi...\n      MSTORE \t\t\tmapping(address => bool) publi...\n      DUP1 \t\t\tmapping(address => bool) publi...\n      PUSH 0\t\t\tmapping(address => bool) publi...\n      MSTORE \t\t\tmapping(address => bool) publi...\n      PUSH 40\t\t\tmapping(address => bool) publi...\n      PUSH 0\t\t\tmapping(address => bool) publi...\n      KECCAK256 \t\t\tmapping(address => bool) publi...\n      PUSH 0\t\t\tmapping(address => bool) publi...\n      SWAP2 \t\t\tmapping(address => bool) publi...\n      POP \t\t\tmapping(address => bool) publi...\n      SLOAD \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      PUSH 100\t\t\tmapping(address => bool) publi...\n      EXP \t\t\tmapping(address => bool) publi...\n      SWAP1 \t\t\tmapping(address => bool) publi...\n      DIV \t\t\tmapping(address => bool) publi...\n      PUSH FF\t\t\tmapping(address => bool) publi...\n      AND \t\t\tmapping(address => bool) publi...\n      DUP2 \t\t\tmapping(address => bool) publi...\n      JUMP [out]\t\t\tmapping(address => bool) publi...\n    tag 36\t\t\taddress public owner\n      JUMPDEST \t\t\taddress public owner\n      PUSH 0\t\t\taddress public owner\n      DUP1 \t\t\taddress public owner\n      SLOAD \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      PUSH 100\t\t\taddress public owner\n      EXP \t\t\taddress public owner\n      SWAP1 \t\t\taddress public owner\n      DIV \t\t\taddress public owner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\taddress public owner\n      AND \t\t\taddress public owner\n      DUP2 \t\t\taddress public owner\n      JUMP [out]\t\t\taddress public owner\n    tag 42\t\t\tfunction setExemptionThreshold...\n      JUMPDEST \t\t\tfunction setExemptionThreshold...\n      PUSH 0\t\t\towner\n      DUP1 \t\t\towner\n      SLOAD \t\t\towner\n      SWAP1 \t\t\towner\n      PUSH 100\t\t\towner\n      EXP \t\t\towner\n      SWAP1 \t\t\towner\n      DIV \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner\n      AND \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      EQ \t\t\tmsg.sender == owner\n      PUSH [tag] 74\t\t\trequire(msg.sender == owner, \"...\n      JUMPI \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == owner, \"...\n      DUP2 \t\t\trequire(msg.sender == owner, \"...\n      MSTORE \t\t\trequire(msg.sender == owner, \"...\n      PUSH 4\t\t\trequire(msg.sender == owner, \"...\n      ADD \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 75\t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 60\t\t\trequire(msg.sender == owner, \"...\n      JUMP [in]\t\t\trequire(msg.sender == owner, \"...\n    tag 75\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      DUP1 \t\t\trequire(msg.sender == owner, \"...\n      SWAP2 \t\t\trequire(msg.sender == owner, \"...\n      SUB \t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      REVERT \t\t\trequire(msg.sender == owner, \"...\n    tag 74\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      DUP1 \t\t\t_threshold\n      PUSH 1\t\t\texemptionThreshold\n      DUP2 \t\t\texemptionThreshold = _threshol...\n      SWAP1 \t\t\texemptionThreshold = _threshol...\n      SSTORE \t\t\texemptionThreshold = _threshol...\n      POP \t\t\texemptionThreshold = _threshol...\n      POP \t\t\tfunction setExemptionThreshold...\n      JUMP [out]\t\t\tfunction setExemptionThreshold...\n    tag 45\t\t\tfunction getWalletBalanceInUSD...\n      JUMPDEST \t\t\tfunction getWalletBalanceInUSD...\n      PUSH 0\t\t\tuint256\n      DUP1 \t\t\tint256 price\n      PUSH 2\t\t\tpriceFeed\n      PUSH 0\t\t\tpriceFeed\n      SWAP1 \t\t\tpriceFeed\n      SLOAD \t\t\tpriceFeed\n      SWAP1 \t\t\tpriceFeed\n      PUSH 100\t\t\tpriceFeed\n      EXP \t\t\tpriceFeed\n      SWAP1 \t\t\tpriceFeed\n      DIV \t\t\tpriceFeed\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tpriceFeed\n      AND \t\t\tpriceFeed\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tpriceFeed.latestRoundData\n      AND \t\t\tpriceFeed.latestRoundData\n      PUSH FEAF968C\t\t\tpriceFeed.latestRoundData\n      PUSH 40\t\t\tpriceFeed.latestRoundData()\n      MLOAD \t\t\tpriceFeed.latestRoundData()\n      DUP2 \t\t\tpriceFeed.latestRoundData()\n      PUSH FFFFFFFF\t\t\tpriceFeed.latestRoundData()\n      AND \t\t\tpriceFeed.latestRoundData()\n      PUSH E0\t\t\tpriceFeed.latestRoundData()\n      SHL \t\t\tpriceFeed.latestRoundData()\n      DUP2 \t\t\tpriceFeed.latestRoundData()\n      MSTORE \t\t\tpriceFeed.latestRoundData()\n      PUSH 4\t\t\tpriceFeed.latestRoundData()\n      ADD \t\t\tpriceFeed.latestRoundData()\n      PUSH A0\t\t\tpriceFeed.latestRoundData()\n      PUSH 40\t\t\tpriceFeed.latestRoundData()\n      MLOAD \t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      DUP4 \t\t\tpriceFeed.latestRoundData()\n      SUB \t\t\tpriceFeed.latestRoundData()\n      DUP2 \t\t\tpriceFeed.latestRoundData()\n      DUP7 \t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      EXTCODESIZE \t\t\tpriceFeed.latestRoundData()\n      ISZERO \t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      ISZERO \t\t\tpriceFeed.latestRoundData()\n      PUSH [tag] 78\t\t\tpriceFeed.latestRoundData()\n      JUMPI \t\t\tpriceFeed.latestRoundData()\n      PUSH 0\t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      REVERT \t\t\tpriceFeed.latestRoundData()\n    tag 78\t\t\tpriceFeed.latestRoundData()\n      JUMPDEST \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\tpriceFeed.latestRoundData()\n      GAS \t\t\tpriceFeed.latestRoundData()\n      STATICCALL \t\t\tpriceFeed.latestRoundData()\n      ISZERO \t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      ISZERO \t\t\tpriceFeed.latestRoundData()\n      PUSH [tag] 80\t\t\tpriceFeed.latestRoundData()\n      JUMPI \t\t\tpriceFeed.latestRoundData()\n      RETURNDATASIZE \t\t\tpriceFeed.latestRoundData()\n      PUSH 0\t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      RETURNDATACOPY \t\t\tpriceFeed.latestRoundData()\n      RETURNDATASIZE \t\t\tpriceFeed.latestRoundData()\n      PUSH 0\t\t\tpriceFeed.latestRoundData()\n      REVERT \t\t\tpriceFeed.latestRoundData()\n    tag 80\t\t\tpriceFeed.latestRoundData()\n      JUMPDEST \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\tpriceFeed.latestRoundData()\n      PUSH 40\t\t\tpriceFeed.latestRoundData()\n      MLOAD \t\t\tpriceFeed.latestRoundData()\n      RETURNDATASIZE \t\t\tpriceFeed.latestRoundData()\n      PUSH 1F\t\t\tpriceFeed.latestRoundData()\n      NOT \t\t\tpriceFeed.latestRoundData()\n      PUSH 1F\t\t\tpriceFeed.latestRoundData()\n      DUP3 \t\t\tpriceFeed.latestRoundData()\n      ADD \t\t\tpriceFeed.latestRoundData()\n      AND \t\t\tpriceFeed.latestRoundData()\n      DUP3 \t\t\tpriceFeed.latestRoundData()\n      ADD \t\t\tpriceFeed.latestRoundData()\n      DUP1 \t\t\tpriceFeed.latestRoundData()\n      PUSH 40\t\t\tpriceFeed.latestRoundData()\n      MSTORE \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\tpriceFeed.latestRoundData()\n      DUP2 \t\t\tpriceFeed.latestRoundData()\n      ADD \t\t\tpriceFeed.latestRoundData()\n      SWAP1 \t\t\tpriceFeed.latestRoundData()\n      PUSH [tag] 81\t\t\tpriceFeed.latestRoundData()\n      SWAP2 \t\t\tpriceFeed.latestRoundData()\n      SWAP1 \t\t\tpriceFeed.latestRoundData()\n      PUSH [tag] 82\t\t\tpriceFeed.latestRoundData()\n      JUMP [in]\t\t\tpriceFeed.latestRoundData()\n    tag 81\t\t\tpriceFeed.latestRoundData()\n      JUMPDEST \t\t\tpriceFeed.latestRoundData()\n      POP \t\t\t(, int256 price, , ,) = priceF...\n      POP \t\t\t(, int256 price, , ,) = priceF...\n      POP \t\t\t(, int256 price, , ,) = priceF...\n      SWAP2 \t\t\t(, int256 price, , ,) = priceF...\n      POP \t\t\t(, int256 price, , ,) = priceF...\n      POP \t\t\t(, int256 price, , ,) = priceF...\n      PUSH 0\t\t\tuint256 walletBalanceInWei\n      DUP4 \t\t\t_wallet\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t_wallet.balance\n      AND \t\t\t_wallet.balance\n      BALANCE \t\t\t_wallet.balance\n      SWAP1 \t\t\tuint256 walletBalanceInWei = _...\n      POP \t\t\tuint256 walletBalanceInWei = _...\n      PUSH 0\t\t\tuint256 walletBalanceInUSD\n      PUSH DE0B6B3A7640000\t\t\t1e18\n      DUP4 \t\t\tprice\n      DUP4 \t\t\twalletBalanceInWei\n      PUSH [tag] 83\t\t\twalletBalanceInWei * uint256(p...\n      SWAP2 \t\t\twalletBalanceInWei * uint256(p...\n      SWAP1 \t\t\twalletBalanceInWei * uint256(p...\n      PUSH [tag] 84\t\t\twalletBalanceInWei * uint256(p...\n      JUMP [in]\t\t\twalletBalanceInWei * uint256(p...\n    tag 83\t\t\twalletBalanceInWei * uint256(p...\n      JUMPDEST \t\t\twalletBalanceInWei * uint256(p...\n      PUSH [tag] 85\t\t\t(walletBalanceInWei * uint256(...\n      SWAP2 \t\t\t(walletBalanceInWei * uint256(...\n      SWAP1 \t\t\t(walletBalanceInWei * uint256(...\n      PUSH [tag] 86\t\t\t(walletBalanceInWei * uint256(...\n      JUMP [in]\t\t\t(walletBalanceInWei * uint256(...\n    tag 85\t\t\t(walletBalanceInWei * uint256(...\n      JUMPDEST \t\t\t(walletBalanceInWei * uint256(...\n      SWAP1 \t\t\tuint256 walletBalanceInUSD = (...\n      POP \t\t\tuint256 walletBalanceInUSD = (...\n      DUP1 \t\t\twalletBalanceInUSD\n      SWAP4 \t\t\treturn walletBalanceInUSD\n      POP \t\t\treturn walletBalanceInUSD\n      POP \t\t\treturn walletBalanceInUSD\n      POP \t\t\treturn walletBalanceInUSD\n      POP \t\t\treturn walletBalanceInUSD\n      SWAP2 \t\t\tfunction getWalletBalanceInUSD...\n      SWAP1 \t\t\tfunction getWalletBalanceInUSD...\n      POP \t\t\tfunction getWalletBalanceInUSD...\n      JUMP [out]\t\t\tfunction getWalletBalanceInUSD...\n    tag 48\t\t\tuint256 public exemptionCooldo...\n      JUMPDEST \t\t\tuint256 public exemptionCooldo...\n      PUSH 5\t\t\tuint256 public exemptionCooldo...\n      SLOAD \t\t\tuint256 public exemptionCooldo...\n      DUP2 \t\t\tuint256 public exemptionCooldo...\n      JUMP [out]\t\t\tuint256 public exemptionCooldo...\n    tag 51\t\t\tuint256 public exemptionThresh...\n      JUMPDEST \t\t\tuint256 public exemptionThresh...\n      PUSH 1\t\t\tuint256 public exemptionThresh...\n      SLOAD \t\t\tuint256 public exemptionThresh...\n      DUP2 \t\t\tuint256 public exemptionThresh...\n      JUMP [out]\t\t\tuint256 public exemptionThresh...\n    tag 54\t\t\tfunction doSomethingSecure() e...\n      JUMPDEST \t\t\tfunction doSomethingSecure() e...\n      PUSH 0\t\t\towner\n      DUP1 \t\t\towner\n      SLOAD \t\t\towner\n      SWAP1 \t\t\towner\n      PUSH 100\t\t\towner\n      EXP \t\t\towner\n      SWAP1 \t\t\towner\n      DIV \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\towner\n      AND \t\t\towner\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tmsg.sender == owner\n      AND \t\t\tmsg.sender == owner\n      EQ \t\t\tmsg.sender == owner\n      PUSH [tag] 88\t\t\trequire(msg.sender == owner, \"...\n      JUMPI \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(msg.sender == owner, \"...\n      DUP2 \t\t\trequire(msg.sender == owner, \"...\n      MSTORE \t\t\trequire(msg.sender == owner, \"...\n      PUSH 4\t\t\trequire(msg.sender == owner, \"...\n      ADD \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 89\t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 60\t\t\trequire(msg.sender == owner, \"...\n      JUMP [in]\t\t\trequire(msg.sender == owner, \"...\n    tag 89\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH 40\t\t\trequire(msg.sender == owner, \"...\n      MLOAD \t\t\trequire(msg.sender == owner, \"...\n      DUP1 \t\t\trequire(msg.sender == owner, \"...\n      SWAP2 \t\t\trequire(msg.sender == owner, \"...\n      SUB \t\t\trequire(msg.sender == owner, \"...\n      SWAP1 \t\t\trequire(msg.sender == owner, \"...\n      REVERT \t\t\trequire(msg.sender == owner, \"...\n    tag 88\t\t\trequire(msg.sender == owner, \"...\n      JUMPDEST \t\t\trequire(msg.sender == owner, \"...\n      PUSH [tag] 91\t\t\tisExemptFromFees()\n      PUSH [tag] 16\t\t\tisExemptFromFees\n      JUMP [in]\t\t\tisExemptFromFees()\n    tag 91\t\t\tisExemptFromFees()\n      JUMPDEST \t\t\tisExemptFromFees()\n      PUSH [tag] 92\t\t\trequire(isExemptFromFees(), \"W...\n      JUMPI \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 40\t\t\trequire(isExemptFromFees(), \"W...\n      MLOAD \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(isExemptFromFees(), \"W...\n      DUP2 \t\t\trequire(isExemptFromFees(), \"W...\n      MSTORE \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 4\t\t\trequire(isExemptFromFees(), \"W...\n      ADD \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH [tag] 93\t\t\trequire(isExemptFromFees(), \"W...\n      SWAP1 \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH [tag] 65\t\t\trequire(isExemptFromFees(), \"W...\n      JUMP [in]\t\t\trequire(isExemptFromFees(), \"W...\n    tag 93\t\t\trequire(isExemptFromFees(), \"W...\n      JUMPDEST \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 40\t\t\trequire(isExemptFromFees(), \"W...\n      MLOAD \t\t\trequire(isExemptFromFees(), \"W...\n      DUP1 \t\t\trequire(isExemptFromFees(), \"W...\n      SWAP2 \t\t\trequire(isExemptFromFees(), \"W...\n      SUB \t\t\trequire(isExemptFromFees(), \"W...\n      SWAP1 \t\t\trequire(isExemptFromFees(), \"W...\n      REVERT \t\t\trequire(isExemptFromFees(), \"W...\n    tag 92\t\t\trequire(isExemptFromFees(), \"W...\n      JUMPDEST \t\t\trequire(isExemptFromFees(), \"W...\n      PUSH 5\t\t\texemptionCooldown\n      SLOAD \t\t\texemptionCooldown\n      PUSH 4\t\t\tlastExemptionTimestamp\n      PUSH 0\t\t\tlastExemptionTimestamp[msg.sen...\n      CALLER \t\t\tmsg.sender\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tlastExemptionTimestamp[msg.sen...\n      AND \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\tlastExemptionTimestamp[msg.sen...\n      AND \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      MSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 20\t\t\tlastExemptionTimestamp[msg.sen...\n      ADD \t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP1 \t\t\tlastExemptionTimestamp[msg.sen...\n      DUP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      MSTORE \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 20\t\t\tlastExemptionTimestamp[msg.sen...\n      ADD \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH 0\t\t\tlastExemptionTimestamp[msg.sen...\n      KECCAK256 \t\t\tlastExemptionTimestamp[msg.sen...\n      SLOAD \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH [tag] 95\t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP2 \t\t\tlastExemptionTimestamp[msg.sen...\n      SWAP1 \t\t\tlastExemptionTimestamp[msg.sen...\n      PUSH [tag] 68\t\t\tlastExemptionTimestamp[msg.sen...\n      JUMP [in]\t\t\tlastExemptionTimestamp[msg.sen...\n    tag 95\t\t\tlastExemptionTimestamp[msg.sen...\n      JUMPDEST \t\t\tlastExemptionTimestamp[msg.sen...\n      TIMESTAMP \t\t\tblock.timestamp\n      LT \t\t\tblock.timestamp >= lastExempti...\n      ISZERO \t\t\tblock.timestamp >= lastExempti...\n      PUSH [tag] 96\t\t\trequire(block.timestamp >= las...\n      JUMPI \t\t\trequire(block.timestamp >= las...\n      PUSH 40\t\t\trequire(block.timestamp >= las...\n      MLOAD \t\t\trequire(block.timestamp >= las...\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\trequire(block.timestamp >= las...\n      DUP2 \t\t\trequire(block.timestamp >= las...\n      MSTORE \t\t\trequire(block.timestamp >= las...\n      PUSH 4\t\t\trequire(block.timestamp >= las...\n      ADD \t\t\trequire(block.timestamp >= las...\n      PUSH [tag] 97\t\t\trequire(block.timestamp >= las...\n      SWAP1 \t\t\trequire(block.timestamp >= las...\n      PUSH [tag] 71\t\t\trequire(block.timestamp >= las...\n      JUMP [in]\t\t\trequire(block.timestamp >= las...\n    tag 97\t\t\trequire(block.timestamp >= las...\n      JUMPDEST \t\t\trequire(block.timestamp >= las...\n      PUSH 40\t\t\trequire(block.timestamp >= las...\n      MLOAD \t\t\trequire(block.timestamp >= las...\n      DUP1 \t\t\trequire(block.timestamp >= las...\n      SWAP2 \t\t\trequire(block.timestamp >= las...\n      SUB \t\t\trequire(block.timestamp >= las...\n      SWAP1 \t\t\trequire(block.timestamp >= las...\n      REVERT \t\t\trequire(block.timestamp >= las...\n    tag 96\t\t\trequire(block.timestamp >= las...\n      JUMPDEST \t\t\trequire(block.timestamp >= las...\n      JUMP [out]\t\t\tfunction doSomethingSecure() e...\n    tag 100\t\t\t-License-Identifier: MIT\\nprag...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\nprag...\n      PUSH 0\t\t\t-License-Identifier: MIT\\nprag...\n      DUP2 \t\t\tntract\n      CALLDATALOAD \t\t\tb.com/smartcontractk\n      SWAP1 \t\t\ts://github.com/smartcontractk\n      POP \t\t\ts://github.com/smartcontractk\n      PUSH [tag] 102\t\t\tink/blob/master/contracts/src/...\n      DUP2 \t\t\trc/v0\n      PUSH [tag] 103\t\t\tink/blob/master/contracts/src/...\n      JUMP [in]\t\t\tink/blob/master/contracts/src/...\n    tag 102\t\t\tink/blob/master/contracts/src/...\n      JUMPDEST \t\t\tink/blob/master/contracts/src/...\n      SWAP3 \t\t\tport \"https://github.com/smart...\n      SWAP2 \t\t\tport \"https://github.com/smart...\n      POP \t\t\tport \"https://github.com/smart...\n      POP \t\t\tport \"https://github.com/smart...\n      JUMP [out]\t\t\tport \"https://github.com/smart...\n    tag 104\t\t\t/AggregatorV3Interface.sol\";\\n...\n      JUMPDEST \t\t\t/AggregatorV3Interface.sol\";\\n...\n      PUSH 0\t\t\t/AggregatorV3Interface.sol\";\\n...\n      DUP2 \t\t\t\\n    u\n      MLOAD \t\t\towner;\\n    ui\n      SWAP1 \t\t\ts public owner;\\n    ui\n      POP \t\t\ts public owner;\\n    ui\n      PUSH [tag] 106\t\t\tlic exemptionThreshold = 100; ...\n      DUP2 \t\t\t00; /\n      PUSH [tag] 107\t\t\tlic exemptionThreshold = 100; ...\n      JUMP [in]\t\t\tlic exemptionThreshold = 100; ...\n    tag 106\t\t\tlic exemptionThreshold = 100; ...\n      JUMPDEST \t\t\tlic exemptionThreshold = 100; ...\n      SWAP3 \t\t\t    address public owner;\\n   ...\n      SWAP2 \t\t\t    address public owner;\\n   ...\n      POP \t\t\t    address public owner;\\n   ...\n      POP \t\t\t    address public owner;\\n   ...\n      JUMP [out]\t\t\t    address public owner;\\n   ...\n    tag 108\t\t\t AggregatorV3Interface public ...\n      JUMPDEST \t\t\t AggregatorV3Interface public ...\n      PUSH 0\t\t\t AggregatorV3Interface public ...\n      DUP2 \t\t\tConfir\n      CALLDATALOAD \t\t\tpublic walletConfirm\n      SWAP1 \t\t\t=> bool) public walletConfirm\n      POP \t\t\t=> bool) public walletConfirm\n      PUSH [tag] 110\t\t\tapping(address => uint256) pub...\n      DUP2 \t\t\tpubli\n      PUSH [tag] 111\t\t\tapping(address => uint256) pub...\n      JUMP [in]\t\t\tapping(address => uint256) pub...\n    tag 110\t\t\tapping(address => uint256) pub...\n      JUMPDEST \t\t\tapping(address => uint256) pub...\n      SWAP3 \t\t\tg(address => bool) public wall...\n      SWAP2 \t\t\tg(address => bool) public wall...\n      POP \t\t\tg(address => bool) public wall...\n      POP \t\t\tg(address => bool) public wall...\n      JUMP [out]\t\t\tg(address => bool) public wall...\n    tag 112\t\t\tonTimestamp;\\n\\n    uint256 pu...\n      JUMPDEST \t\t\tonTimestamp;\\n\\n    uint256 pu...\n      PUSH 0\t\t\tonTimestamp;\\n\\n    uint256 pu...\n      DUP2 \t\t\tnlyOwn\n      MLOAD \t\t\tfier onlyOwne\n      SWAP1 \t\t\t\\n    modifier onlyOwne\n      POP \t\t\t\\n    modifier onlyOwne\n      PUSH [tag] 114\t\t\t     require(msg.sender == own...\n      DUP2 \t\t\towner\n      PUSH [tag] 111\t\t\t     require(msg.sender == own...\n      JUMP [in]\t\t\t     require(msg.sender == own...\n    tag 114\t\t\t     require(msg.sender == own...\n      JUMPDEST \t\t\t     require(msg.sender == own...\n      SWAP3 \t\t\t 24 hours\\n\\n    modifier only...\n      SWAP2 \t\t\t 24 hours\\n\\n    modifier only...\n      POP \t\t\t 24 hours\\n\\n    modifier only...\n      POP \t\t\t 24 hours\\n\\n    modifier only...\n      JUMP [out]\t\t\t 24 hours\\n\\n    modifier only...\n    tag 115\t\t\tner\");\\n        _;\\n    }\\n\\n ...\n      JUMPDEST \t\t\tner\");\\n        _;\\n    }\\n\\n ...\n      PUSH 0\t\t\tner\");\\n        _;\\n    }\\n\\n ...\n      DUP2 \t\t\tes(), \n      MLOAD \t\t\tFromFees(), \"\n      SWAP1 \t\t\t(isExemptFromFees(), \"\n      POP \t\t\t(isExemptFromFees(), \"\n      PUSH [tag] 117\t\t\tlance is not below the thresho...\n      DUP2 \t\t\teshol\n      PUSH [tag] 118\t\t\tlance is not below the thresho...\n      JUMP [in]\t\t\tlance is not below the thresho...\n    tag 117\t\t\tlance is not below the thresho...\n      JUMPDEST \t\t\tlance is not below the thresho...\n      SWAP3 \t\t\t   require(isExemptFromFees(),...\n      SWAP2 \t\t\t   require(isExemptFromFees(),...\n      POP \t\t\t   require(isExemptFromFees(),...\n      POP \t\t\t   require(isExemptFromFees(),...\n      JUMP [out]\t\t\t   require(isExemptFromFees(),...\n    tag 21\t\t\t_;\\n    }\\n\\n    modifier cool...\n      JUMPDEST \t\t\t_;\\n    }\\n\\n    modifier cool...\n      PUSH 0\t\t\t_;\\n    }\\n\\n    modifier cool...\n      PUSH 20\t\t\ter\n      DUP3 \t\t\tamp[msg.s\n      DUP5 \t\t\tionTime\n      SUB \t\t\temptionTimestamp[msg.se\n      SLT \t\t\tstExemptionTimestamp[msg.sende...\n      ISZERO \t\t\t l\n      PUSH [tag] 120\t\t\t l\n      JUMPI \t\t\t l\n      PUSH 0\t\t\to\n      DUP1 \t\t\to\n      REVERT \t\t\texemptionCoo\n    tag 120\t\t\t l\n      JUMPDEST \t\t\t l\n      PUSH 0\t\t\t \n      PUSH [tag] 121\t\t\tuctor(address _priceFeed) {\\n ...\n      DUP5 \t\t\tsg.send\n      DUP3 \t\t\towner \n      DUP6 \t\t\t {\\n      \n      ADD \t\t\teed) {\\n        owner =\n      PUSH [tag] 100\t\t\tuctor(address _priceFeed) {\\n ...\n      JUMP [in]\t\t\tuctor(address _priceFeed) {\\n ...\n    tag 121\t\t\tuctor(address _priceFeed) {\\n ...\n      JUMPDEST \t\t\tuctor(address _priceFeed) {\\n ...\n      SWAP2 \t\t\t    constructor(address _price...\n      POP \t\t\t    constructor(address _price...\n      POP \t\t\tdown period not passed\");\\n   ...\n      SWAP3 \t\t\tmestamp >= lastExemptionTimest...\n      SWAP2 \t\t\tmestamp >= lastExemptionTimest...\n      POP \t\t\tmestamp >= lastExemptionTimest...\n      POP \t\t\tmestamp >= lastExemptionTimest...\n      JUMP [out]\t\t\tmestamp >= lastExemptionTimest...\n    tag 41\t\t\tAggregatorV3Interface(_priceFe...\n      JUMPDEST \t\t\tAggregatorV3Interface(_priceFe...\n      PUSH 0\t\t\tAggregatorV3Interface(_priceFe...\n      PUSH 20\t\t\tly\n      DUP3 \t\t\t external\n      DUP5 \t\t\threshol\n      SUB \t\t\t6 _threshold) external \n      SLT \t\t\tnt256 _threshold) external onl...\n      ISZERO \t\t\t(u\n      PUSH [tag] 123\t\t\t(u\n      JUMPI \t\t\t(u\n      PUSH 0\t\t\t \n      DUP1 \t\t\t \n      REVERT \t\t\tr {\\n        \n    tag 123\t\t\t(u\n      JUMPDEST \t\t\t(u\n      PUSH 0\t\t\t \n      PUSH [tag] 124\t\t\tees() public view returns (boo...\n      DUP5 \t\t\tnt256 w\n      DUP3 \t\t\t      \n      DUP6 \t\t\t (bool) {\n      ADD \t\t\turns (bool) {\\n        \n      PUSH [tag] 108\t\t\tees() public view returns (boo...\n      JUMP [in]\t\t\tees() public view returns (boo...\n    tag 124\t\t\tees() public view returns (boo...\n      JUMPDEST \t\t\tees() public view returns (boo...\n      SWAP2 \t\t\txemptFromFees() public view re...\n      POP \t\t\txemptFromFees() public view re...\n      POP \t\t\teshold = _threshold;\\n    }\\n\\...\n      SWAP3 \t\t\tnThreshold(uint256 _threshold)...\n      SWAP2 \t\t\tnThreshold(uint256 _threshold)...\n      POP \t\t\tnThreshold(uint256 _threshold)...\n      POP \t\t\tnThreshold(uint256 _threshold)...\n      JUMP [out]\t\t\tnThreshold(uint256 _threshold)...\n    tag 82\t\t\talletBalanceInUSD(msg.sender);...\n      JUMPDEST \t\t\talletBalanceInUSD(msg.sender);...\n      PUSH 0\t\t\talletBalanceInUSD(msg.sender);...\n      DUP1 \t\t\talletBalanceInUSD(msg.sender);...\n      PUSH 0\t\t\talletBalanceInUSD(msg.sender);...\n      DUP1 \t\t\talletBalanceInUSD(msg.sender);...\n      PUSH 0\t\t\talletBalanceInUSD(msg.sender);...\n      PUSH A0\t\t\t   \n      DUP7 \t\t\t256) {\\n  \n      DUP9 \t\t\trns (ui\n      SUB \t\t\treturns (uint256) {\\n   \n      SLT \t\t\tiew returns (uint256) {\\n     ...\n      ISZERO \t\t\tc \n      PUSH [tag] 126\t\t\tc \n      JUMPI \t\t\tc \n      PUSH 0\t\t\te\n      DUP1 \t\t\tr\n      REVERT \t\t\tnt256 price,\n    tag 126\t\t\tc \n      JUMPDEST \t\t\tc \n      PUSH 0\t\t\t \n      PUSH [tag] 127\t\t\tInWei = _wallet.balance;\\n    ...\n      DUP9 \t\t\tnUSD = \n      DUP3 \t\t\ttBalan\n      DUP10 \t\t\tnt256 wal\n      ADD \t\t\t  uint256 walletBalanc\n      PUSH [tag] 115\t\t\tInWei = _wallet.balance;\\n    ...\n      JUMP [in]\t\t\tInWei = _wallet.balance;\\n    ...\n    tag 127\t\t\tInWei = _wallet.balance;\\n    ...\n      JUMPDEST \t\t\tInWei = _wallet.balance;\\n    ...\n      SWAP6 \t\t\tletBalanceInWei = _wallet.bala...\n      POP \t\t\tletBalanceInWei = _wallet.bala...\n      POP \t\t\teFeed.latestRoundData();\\n    ...\n      PUSH 20\t\t\ton\n      PUSH [tag] 128\t\t\t      return walletBalanceInUS...\n      DUP9 \t\t\tnfirmWa\n      DUP3 \t\t\tnction\n      DUP10 \t\t\t  }\\n\\n    \n      ADD \t\t\t;\\n    }\\n\\n    function \n      PUSH [tag] 104\t\t\t      return walletBalanceInUS...\n      JUMP [in]\t\t\t      return walletBalanceInUS...\n    tag 128\t\t\t      return walletBalanceInUS...\n      JUMPDEST \t\t\t      return walletBalanceInUS...\n      SWAP5 \t\t\tto USD\\n\\n        return walle...\n      POP \t\t\tto USD\\n\\n        return walle...\n      POP \t\t\t uint256(price)) / 1e18; // co...\n      PUSH 40\t\t\tow\n      PUSH [tag] 129\t\t\t {\\n        walletConfirmed[ms...\n      DUP9 \t\t\tastExem\n      DUP3 \t\t\t      \n      DUP10 \t\t\tr] = true\n      ADD \t\t\tender] = true;\\n       \n      PUSH [tag] 112\t\t\t {\\n        walletConfirmed[ms...\n      JUMP [in]\t\t\t {\\n        walletConfirmed[ms...\n    tag 129\t\t\t {\\n        walletConfirmed[ms...\n      JUMPDEST \t\t\t {\\n        walletConfirmed[ms...\n      SWAP4 \t\t\tdownPassed {\\n        walletCo...\n      POP \t\t\tdownPassed {\\n        walletCo...\n      POP \t\t\thold() external onlyOwner belo...\n      PUSH 60\t\t\t}\\n\n      PUSH [tag] 130\t\t\t that requires both ownership,...\n      DUP9 \t\t\tthe thr\n      DUP3 \t\t\tet bel\n      DUP10 \t\t\tfirmed wa\n      ADD \t\t\t confirmed wallet belo\n      PUSH [tag] 112\t\t\t that requires both ownership,...\n      JUMP [in]\t\t\t that requires both ownership,...\n    tag 130\t\t\t that requires both ownership,...\n      JUMPDEST \t\t\t that requires both ownership,...\n      SWAP3 \t\t\te function that requires both ...\n      POP \t\t\te function that requires both ...\n      POP \t\t\tnder] = block.timestamp;\\n    ...\n      PUSH 80\t\t\tngS\n      PUSH [tag] 131\t\t\ter belowThreshold cooldownPass...\n      DUP9 \t\t\tre logi\n      DUP3 \t\t\tYour s\n      DUP10 \t\t\t        /\n      ADD \t\t\td {\\n        // Your se\n      PUSH [tag] 115\t\t\ter belowThreshold cooldownPass...\n      JUMP [in]\t\t\ter belowThreshold cooldownPass...\n    tag 131\t\t\ter belowThreshold cooldownPass...\n      JUMPDEST \t\t\ter belowThreshold cooldownPass...\n      SWAP2 \t\t\tal onlyOwner belowThreshold co...\n      POP \t\t\tal onlyOwner belowThreshold co...\n      POP \t\t\tpassed\\n    function doSomethi...\n      SWAP3 \t\t\tlet) public view returns (uint...\n      SWAP6 \t\t\tlet) public view returns (uint...\n      POP \t\t\tlet) public view returns (uint...\n      SWAP3 \t\t\tlet) public view returns (uint...\n      SWAP6 \t\t\tlet) public view returns (uint...\n      SWAP1 \t\t\tlet) public view returns (uint...\n      SWAP4 \t\t\tlet) public view returns (uint...\n      POP \t\t\tlet) public view returns (uint...\n      JUMP [out]\t\t\tlet) public view returns (uint...\n    tag 132\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 134\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP [in]\t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 138\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMP [in]\t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 142\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 143\t\t\t\n      JUMP [in]\t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 144\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 146\t\t\t\n      PUSH 1A\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMP [in]\t\t\t\n    tag 146\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 436F6F6C646F776E20706572696F64206E6F7420706173736564000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 150\t\t\t\n      PUSH D\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMP [in]\t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 4E6F7420746865206F776E657200000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 153\t\t\t\n      PUSH 29\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 147\t\t\t\n      JUMP [in]\t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 57616C6C65742062616C616E6365206973206E6F742062656C6F772074686520\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 7468726573686F6C640000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 154\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 156\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 38\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 159\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 132\t\t\t\n      JUMP [in]\t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 18\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 161\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 136\t\t\t\n      JUMP [in]\t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 163\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 140\t\t\t\n      JUMP [in]\t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 71\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 165\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 144\t\t\t\n      JUMP [in]\t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 167\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 148\t\t\t\n      JUMP [in]\t\t\t\n    tag 167\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 169\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP [in]\t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 171\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 154\t\t\t\n      JUMP [in]\t\t\t\n    tag 171\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 174\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 175\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 177\t\t\t\n      PUSH [tag] 178\t\t\t\n      JUMP [in]\t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 86\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 180\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 181\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 183\t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMP [in]\t\t\t\n    tag 183\t\t\t\n      JUMPDEST \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 186\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 187\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DIV \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      DUP3 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 189\t\t\t\n      PUSH [tag] 178\t\t\t\n      JUMP [in]\t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n    tag 188\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 191\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP [in]\t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 139\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 194\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 157\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 198\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 143\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 201\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 202\t\t\t\n      JUMP [in]\t\t\t\n    tag 201\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP [in]\t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 103\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 208\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 135\t\t\t\n      JUMP [in]\t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 211\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMP [in]\t\t\t\n    tag 211\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 212\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 214\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP [in]\t\t\t\n    tag 214\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 215\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    tag 118\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 217\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 198\t\t\t\n      JUMP [in]\t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 218\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP [out]\t\t\t\n    .data\n"
}